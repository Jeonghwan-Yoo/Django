02 파이썬 웹 표준 라이브러리
파이썬 웹 프로그래밍은 라이브러리들을 활용하여 이뤄진다.
웹 클라이언트를 직접 만들 때도 웹 라이브러리를 사용하고, 장고와 같은 웹 서버 프레임워크 역시 웹 라이브러러를 사용하여 개발.
파이썬은 설치하면 기본적으로 표준 라이브러리가 있는데, 클라이언트냐 서버냐에 따라 사용하는 라이브러리 모듈이 다르다.

2.1 웹 라이브러리 구성
파이썬의 웹 관련 라이브러리는 2.x버전과 3.x버전이 다르게 구성되어 있다.
함수와 클래스 등의 내용 자체는 거의 동일하지만, 패키지명과 모듈명이 재구성됨.
                       사용자 프로그램/애플리케이션
웹 클라이언트 프로그래밍↙               │         ↘웹 서버 프로그래밍
          urllib패키지(고수준 API제공) │      Web Framework─────────────┐
          │urllib.parse      │        │      │Django, Flask, Tornado 등│
          │urllib.request    │        │      └─────────────────────────┘
          │urllib.error      │        │                 │
          │urllib.response   │        │                 │
          │urllib.robotparser│        │                 │
          └──────────────────┘        │                 │
                 ↓←───────────────────┴────────────────→↓                   
      ┌─────────────────────────────────────────────────────────────┐
      │http.client http.cookiejar            http.cookie http.server│ http 패키지(저수준 API제공)
      └─────────────────────────────────────────────────────────────┘
           웹 클라이언트용 API                      웹 서버용 API                 
urllib패키지에는 웹 클라이언트를 작성하는 데 사용되는 모듈들이 있으며, 가장 빈번하게 사용하는 모듈들.
http패키지는 크게 서버용과 클라이언트용 라이브러리로 나누어 모듈을 담고 있으며, 쿠기 관련 라이브러리도 http패키지 내에서
서버용과 클라이언트용으로 모듈이 구분되어 있습니다.
첫 번째로, 웹 클라이언트를 개발하는 경우에는 주로 urllib 패키지를 사용합니다.
http.client모듈이 HTTP 프로토콜 처리와 관련된 저수준의 클라이언트 기능을 제공하지만, urllib패키지의 모듈들은
HTTP 서버뿐만 아니라 FTP 서버 및 로컬 파일 등을 처리하는데, 클라이언트에서 공통적으로 필요한 함수와 클래스 등을 제공.
주로 URL처리와 서버 액세스 관련 API를 제공하고 있으며, HTTP프로토콜과 관련해 http.client 모듈의 API를 한 번 더
추상화해서 좀 더 쉬운 고수준의 API를 제공하고 있습니다.
두 번째로, 만일 웹 서버 프로그래밍을 한다면 http.cookie모듈이나 http.server모듈을 거의 사용할 일이 없다.
웹 서버 프로그래밍이란 보통은 웹 서버에서 돌아가는 애플리케이션을 개발하는 것으로, 장고와 같은 웹 프레임워크를 사용해
웹 서버 프로그래밍을 하기 때문.
웹 프레임워크는 사용자 프로그램과 저수준의 http.server라이브러리 중간에 위치하여 웹 서버의 애플리케이션 개발을 좀 더
편리하게 해주면서, 표준 라이브러리의 기능을 확장해주는 역할을 하고 있습니다.
웹 프레임워크는 파이썬의 표준 라이브러리를 사용해 개발되었습니다.
웹 프레임워크를 직접 개발하는 고급 프로그래머라면 http.server모듈에서 제공하는 API를 다루지만 보통은 웹 프레임워크에서
제공하는 API를 이용해 웹 서버 애플리케이션을 개발하는 것이 대부분.
3.x버전에서는 크게 서버와 클라이언트 기능을 패키지로 구분하였고, 기존 파이썬 2.x의 모듈명 및 함수와 클래스들을 재구성.
3.x                2.x             변화
---------------------------------------------------------------------------------------
urllib.parse       urlparse        하나의 urllib 패키지로 모아서 모듈을 기능별로 나눴고,
urllib.request     urllib2 대부분   urllib 모듈은 기능에 따라 여러 모듈로 흩어졌다.
urllib.error       urllib2 에러부분 
urllib.response
urllib.robotparser robotparser
---------------------------------------------------------------------------------------
http.server        BaseHTTPServer  하나의 http패키지로 모아 server와 client모듈로 구분
http.server        CGIHTTPServer  
http.server        SimpleHTTPServer
http.client        httplib
---------------------------------------------------------------------------------------
http.cookies       Cookie          하나의 http 패키지로 모았다.
http.cookiejar     cookielib
---------------------------------------------------------------------------------------
html.parser        HTMLParser      하나의 html 패키지로 모았다.
html.entities      htmlentitydefs 

2.2 웹 클라이언트 라이브러리
웹 브라우저는 다양한 웹 클라이언트 중 하나일 뿐.
웹 서버에 요청을 보내는 애플리케이션은 모두 웹 클라이언트.
트위터나 구글 같은 인터넷 서비스를 제공하는 회사들은 외부의 프로그램들이 자신의 서비스를 사용할 수 있도록 OpenAPI를
호출하는 프로그램도 웹 클라이언트.
시스템 간에 연동을 위해 시스템에서 상대 시스템으로 정보를 요청하고, 그 응답을 받는 연동 프로그램을 HTTP 프로토콜을 사용해
개발하는 경우도 해당.
중요한 점은 웹 클라이언트와 서버 간에 HTTP(S) 프로토콜을 사용해 통신한다는 것.
파이썬은 클라이언트를 프로그래밍할 수 있도록 여러 가지 라이브러리를 제공하고 있다.

외부 라이브러리
웹 클라이언트를 위한 파이썬 표준 라이브러리가 있지만, 실제 프로젝트에서는 외부 라이브러리인 request, beautifulsoup4를
더 많이 사용하는 편.
더 간편하고 이해하기 쉬운 문법을 제공하기 때문.

Python Shell 실행
파이썬 언어는 2가지 실행 방법을 제공합니다. 하나는 python 명령어로 파이썬 스크립트 파일 즉, *.py 파일을 실행하는 것.
(>python example.py). 또 다른 방법은 파이썬 쉘 모드에서 라인 단위로 실행하는 것. 쉘 모드로 진입하려면 python만 입력
(>python). 파이썬 쉘 모드에 진입하면 프롬프트가 >>>로 바뀝니다.

2.2.1 urllib.parse 모듈
이 모듈은 URL의 분해, 조립, 변경 및 URL 문자 인코딩, 디코딩 등을 처리하는 함수를 제공한다.
>>> from urllib.parse import urlparse
>>> result = urlparse("http://www.python.org:80/guido/python.html;philosophy?overall=3#n10")
>>> result
ParseResult(scheme='http', netloc='www.python.org:80', path='/guido/python.html', 
params='philosophy', query='overall=3', fragment='n10')
urlparse()함수는 URL을 파싱한 결과로 ParseResult 인스턴스를 반환합니다.
scheme:URL에 사용된 프로토콜을 의미합니다.
netloc:네트워크 위치. user:password@host:port형식으로 표현되며 HTTP프로토콜이면 host:port형식
path:파일이나 애플리케이션 경로를 의미.
params:애플리케이션에 전달될 매개변수. 현재는 사용하지 않습니다.
query:질의 문자열 또는 매개변수로, 앰퍼샌드로 구분된 이름=값 쌍 형식으로 표시.
fragment:문서 내의 앵커 등 조각을 지정합니다.

urlparse() 함수 외에도 urlsplit(), urljoin(), parse_qs(), quote(), encode() 등이 있다.

2.2.2 urllib.request 모듈
urllib.request 모듈은 주어진 URL에서 데이터를 가져오는 기본 기능을 제공합니다.

urlopen(url, data=None, [timeout])
url인자로 지정한 URL로 연결하고, 유사 파일 객체를 반환합니다. url인자는 문자열이거나, Request클래스의 인스턴스.
url에 file스킴을 지정하면 로컬 파일을 열 수 있습니다.
디폴트 요청 방식은 GET이고, 웹 서버에 전달할 파라미터가 있으면 질의 문자열을 url인자에 포함해 보냅니다.
요청 방식을 POST로 보내고 싶으면 data인자에 질의 문자열을 지정해주면 됩니다.
옵션인 timeout은 응답을 기다리는 타임아웃 시간을 초로 표시합니다.

urlopen()함수만 잘 다루어도 웬만한 웹 클라이언트는 대부분 작성할 수 있다.
urlopen()함수를 사용할 때는 게이스별 작성 요령을 알아두면 편리하다.
URL로 GET/POST방식의 간단한 요청 처리       -> urlopen()함수만으로 가능
PUT, HEAD 메소드 등, 헤더 조작이 필요한 경우 -> Request클래스를 같이 사용
인증, 쿠키, 프록시 등 복잡한 요청 처리       -> 인증/쿠키/프록시 해당 핸들러 클래스를 같이 사용

urlopen()함수 - GET 방식 요청
>>> from urllib.request import urlopen
>>> f = urlopen("http://www.example.com")
>>> print(f.read(500).decode('utf-8'))
또는
>python -c "import urllib.request;print(urllib.request.urlopen('http://www.example.com').read(500).decode('utf-8'))"
웹 브라우저의 주소창에 www.example.com이라고 입력하는 것과 동일한 데이터를 웹 서버로부터 가져옵니다.
웹 브라우저는 HTML형식의 데이터를 해석해 화면에 보기 좋게 보여주지만, 파이썬 프로그램은 HTML형식의 데이터를 해석하지 않고
그대로 보여준다.
위 프로그램은 HTTP GET방식을 디폴트로 사용하여 웹 서버에 요청을 보냅니다.

urlopen()함수를 호출 시 data인자를 지정해주면, 함수는 자동으로 POST 방식으로 요청을 보냅니다.
data인자는 URL에 허용된 문자열로 인코딩되어야 하고, 유니코드 타입이아니라 바이트 스트링 타입이어야 합니다.
실제 동작을 확인하려면 POST요청을 처리할 수 있는 서버가 필요합니다.
그러니 ch2-test-server를 먼저 실행 후 실습.

www.example.com서버는 GET 처리만 가능하므로, POST 방식의 웹 요청을 처리하는 서버가 필요합니다.
또한 이후 실습에서는 POST방식뿐만 아니라 AUTH 헤더 등에 대한 실습용 서버가 필요합니다.
>python manage.py runserver

urlopen()함수 - POST 방식 요청
>>> from urllib.request import urlopen
>>> data = "language=python&framwork=django"
>>> f = urlopen("http://127.0.0.1:8000", bytes(data, encoding='utf-8'))
>>> print(f.read(500).decode('utf-8'))

만일 요청을 보낼 때 요청 헤더를 지정해서 보내고 싶은 경우에는 URL을 지정하는 방식을 변경하면 됩니다.
url 인자에 문자열 대신에 Request 객체를 지정합니다.
즉, Request 객체를 생성하고, add_header()로 헤더를 추가해 웹 서버로 요청을 보내면 됩니다.
POST 요청을 보내려면 urlopen() 함수와 마찬가지로 Request 객체를 생성할 때 data 인자를 지정해줍니다.
urlopen()함수 - Request 클래스로 요청 헤더 지정
>>> from urllib.request import urlopen, Request
>>> from urllib.parse import urlencode
>>>
>>> url = 'http://127.0.0.1:8000'
>>> data = {
... 'name': '김석훈',
... 'email': 'shkim@naver.com',
... 'url': 'http://www.naver.com',
... }
>>> encData = urlencode(data)
>>> postData = bytes(encData, encoding='utf-8')
>>> req = Request(url, data=postData)
>>> req.add_header('Content-Type', 'application/x-form-urlencoded')
>>> f = urlopen(req)
>>> print(f.info())
Date: Thu, 20 Jun 2019 11:24:27 GMT
Server: WSGIServer/0.2 CPython/3.6.6
Content-Type: text/html; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 1757
>>> print(f.read(500).decode('utf-8'))

인증 데이터나 쿠키 데이터를 추가하여 요청을 보내거나, 프록시 서버로 요청을 보내는 등 HTTP의 고급 기능을 포함해 요청.
이를 위해 각 기능에 맞는 핸들러 객체를 정의하고, 그 핸들러를 build_opener()함수를 이용해 오프너에 등록합니다.
그런 다음 오프너의 open()함수를 호출하면 서버로 요청이 전송됩니다.
urllib.request모듈에 정의된 HTTPBasicAuthHandler 클래스를 사용해 인증 데이터를 같이 보내는 프로그램.
인증 데이터인 realm, user, passwd는 모두 서버에서 지정한 것으로 채워서 보냅니다.
realm은 서버로부터 받는 401 응답에서 알 수 있습니다.
urlopen()함수 - HTTPBasicAuthHandler 클래스로 인증 요청
>>> from urllib.request import HTTPBasicAuthHandler, build_opener
>>>
>>> auth_handler = HTTPBasicAuthHandler()
>>> auth_handler.add_password(realm='ksh', user='shkim', passwd='shkimadmin', uri='http://127.0.0.1:8000/auth/')
>>> opener = build_opener(auth_handler)
>>> resp = opener.open('http://127.0.0.1:8000/auth/')
>>> print(resp.read().decode('utf-8'))
This is Basic Auth Success Response.

urllib.request모듈에 정의된 HTTPCookieProcessor 클래스를 사용해 쿠키 데이터를 처리하는 프로그램.
첫 번째 요청에서 쿠키를 담기 위한 준비를 하고 서버로 요청을 보냅니다.
두 번째 요청에서는 첫 번째 응답에서 받은 쿠키를 헤더에 담아서 요청을 보냅니다.
두 번째 요청에 쿠키 데이터가 없다면 서버에서 에러로 응답합니다.
urlopen()함수 - HTTPCookieProcessor 클래스로 쿠키 데이터를 포함하여 요청
2-5.py

urllib.request모듈에 정의된 ProxyHandler 및 ProxyBasicAuthHandler 클래스를 사용해 프록시 서버를 통과해 웹 서버로
요청을 보내는 프로그램.
install_opener()함수를 사용해 디폴트 오프너를 지정할 수도 있다.
프록시 서버가 필요하다.
urlopen()함수 - ProxyHandler 및 ProxyBasicAuthHandler 클래스로 프록시 처리
2-6.py 프록시 서버가 필요해 동작하지 않음.

2.2.3 urllib.request 모듈 예제
특정 웹 사이트에서 이미지만을 검색하여 그 리스트를 보여주는 코드.
urlopen()기능을 주로 사용하고, 추가적으로 HTMLParser클래스를 사용한다.
HTMLParser클래스는 표준 라이브러리 html.parser모듈에 정의되어 있고, HTML 문서를 파싱하는 데 사용되는 클래스.
urllib.request 모듈 예제
parse_image.py

2.2.4 http.client 모듈
대부분의 웹 클라이언트 프로그램은 urllib.request 모듈에 정의된 기능만으로도 작성이 가능합니다.
GET, POST 이외의 방식으로 요청을 보내거나, 요청 헤더와 바디 사이에 타이머를 두어 시간을 지연시키는 등
쉽게 처리할 수 없는 경우나 HTTP 프로토콜 요청에 대한 저수준의 더 세밀한 기능이 필요할 때 http.client 모듈을 사용.
urllib.request 모듈도 http.client 모듈에서 제공하는 API를 사용해 만든 모듈이므로, urllib.request 모듈로 작성한 로직은
http.client 모듈을 사용해도 동일하게 작성할 수 있다.
http.client 모듈을 사용할 때는 순서를 기준으로 삼고, 필요에 따라 변경해 코딩.
1)연결 객체 생성     conn=http.client.HTTPConnection("www.python.org")
2)요청을 보냄        conn.request("GET","/index.html")
3)응답 객체 생성     response=conn.getresponse()
4)응답 데이터를 읽음 data=response.read()
5)연결을 닫음        conn.close()

http.client 모듈 사용 - GET 방식 요청
>>> from http.client import HTTPConnection
#HTTPConnection() 클래스 생성 시, 첫 번째 인자는 url이 아니라 host입니다. 그래서 http://를 붙이면 에러.
>>> host = 'www.example.com'
>>> conn = HTTPConnection(host)
#GET방식임을 명시적으로 표현합니다. 
#request(method, url, body, headers)형식이며 methed,url 인자는 필수이고 body, headers 인자는 옵션입니다.
>>> conn.request('GET','/')
>>> r1 = conn.getresponse()
#응답 결과를 출력합니다. r1.msg 속성에는 응답 헤더 정보가 들어있습니다.
>>> print(r1.status, r1.reason)
200 OK
#데이터를 모두 읽어야 다음 request()를 요청할 수 있습니다.
#만일 일부만 읽은 후 다음 request()를 보내면 에러가 납니다.
>>> data1 = r1.read()
#일부만 읽는 경우는, 두 번째 요청 시 에러남
>>> #data1 = r1.read(100)
#두 번째 요청에 대한 테스트
>>> conn.request('GET','/')
>>> r2 = conn.getresponse()
>>> print(r2.status, r2.reason)
200 OK
>>> data2 = r2.read()
>>> print(data2.decode())
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 50px;
        background-color: #fff;
        border-radius: 1em;
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        body {
            background-color: #fff;
        }
        div {
            width: auto;
            margin: 0 auto;
            border-radius: 0;
            padding: 1em;
        }
    }
    </style>
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is established to be used for illustrative examples in documents. You may use this
    domain in examples without prior coordination or asking for permission.</p>
    <p><a href="http://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>
>>> conn.close()

http.client 모듈 사용 - HEAD 방식 요청
>>> from http.client import HTTPConnection
#HTTPConnection() 클래스 생성 시, 첫 번째 인자는 url이 아니라 host입니다. 그래서 http://를 붙이면 에러.
>>> conn = HTTPConnection('www.example.com')
#HEAD 방식임을 명시적으로 표현.
#request(method, url, body, headers)형식이며, method, url인자는 필수고, body, headers 인자는 옵션.
>>> conn.request('HEAD','/')
>>> resp = conn.getresponse()
#응답 결과를 출력합니다. resp.msg 속성에는 응답 헤더 정보가 들어있습니다.
>>> print(resp.status, resp.reason)
200 OK
>>> data = resp.read()
#HEAD 요청에 대한 응답에 헤더는 있지만 바디가 없으므로 data 길이는 0이 됩니다.
>>> print(len(data))
0
>>> print(data == b'')
True
>>> conn.close()

http.client 모듈 사용 - POST 방식 요청
2-10.py

http.client 모듈 사용 - PUT 방식 요청
2-11.py

2.2.5 http.client 모듈 예제
특정 웹 사이트에서 이미지만을 검색하여 그 이미지들을 다운로드하는 코드.
http.cient 모듈 예제
download_image.py

http.client 모듈
http.client 모듈에는 이외에도 헤더를 정밀하게 제어할 수 있는 putheader(), endheaders() 및 send() 등의 
여러 가지 메소드가 있다.

2.3 웹 서버 라이브러리
웹 서버 프로그램을 작성할 때는 보통 웹 프레임워크를 사용해 개발하는 경우가 대부분.
프레임워크는 개발자가 웹 서버 프로그램을 개발하기 쉽도록 저수준의 기능을 이미 만들어 놓은 기반 프로그램.
웹 서버 개발자는 프레임워크를 활용하여 응용 로직만 개발하면 되기 때문에 훨씬 효율적.
하지만 중급, 고급 전문가가 되기 위해서는 웹 프레임워크가 어떻게 동작하는지, 파이썬의 웹 서버 라이브러리가 웹 프레임워크에
어떻게 사용되는지 등에 대한 기술을 파악할 필요가 있습니다.

2.3.1 간단한 웹 서버
웹 서버의 역할은 http 통신에서 클라이언트의 요청을 받고 이를 처리하여 그 결과를 되돌려주는 것입니다.
my_httpserver.py
웹 서버를 만드는 방법이 일정한 룰에 의해 작성됩니다.
이를 기본으로 해서 HTTPServer 클래스나 적절한 핸들러 클래스를 상속받아 그 기능을 확장해 나가게 됩니다.
파이썬에서는 웹 서버를 만드는 데 필요한 라이브러리를 http.server 모듈에서 정의하고 있습니다.
파이썬 2.x에서 BaseHTTPServer, SimpleHTTPServer, CGIHTTPServer 3개의 모듈을 3.x에서 하나로 합쳤다.
하지만 각 모듈 내에 있던 클래스들은 그대로 가져왔습니다.
1)HTTPServer:웹 서버를 만들기 위한 클래스로, 서버 IP와 PORT를 바인딩함.
HTTPServer 객체 생성 시, 핸들러 클래스가 반드시 필요함.
2)BaseHTTPRequestHandler:핸들러를 만들기 위한 기반 클래스로, HTTP 프로토콜 처리 로직이 들어있음.
이 클래스를 상속받아, 자신의 로직 처리를 담당하는 핸들러 클래스를 만듦
3)SimpleHTTPServer:BaseHTTPRequestHandler 클래스를 상속받아 만든 클래스.
GET과 HEAD 메소드 처리가 가능한 핸들러 클래스
4)CGIHTTPRequestHandler:SimpleHTTPRequestHandler 클래스를 상속받아 만든 클래스.
추가적으로 POST 메소드와 CGI 처리가 가능한 핸들러 클래스

2.3.2 HTTPServer 및 BaseHTTPRequestHandler 클래스
원하는 웹 서버를 만들기 위해서는 기반 클래스를 임포트하거나 상속받아야 합니다.
기반이 되는 클래스가 바로 HTTPServer 및 BaseHTTPRequestHandler클래스.
기반 클래스에는 HTTP 프로토콜을 처리해주는 기능이 있어, 상속받으면 따로 HTTP 프로토콜 관련 로직을 코딩 안해도 된다.
SimpleHTTPRequestHandler, CGIHTTPRequestHandler 클래스는 기반 클래스를 상속받아 정의한 핸들러 클래스입니다.
my_httpserver.py을 실행하면 포트번호 8888로 요청을 기다리고 웹 브라우저 주소창에 자신의 서버 IP 127.0.0.1을 적어서 
확인할 수 있습니다.

2.3.3 SimpleHTTPRequestHandler
별도의 코딩 없이도 필요할 때 즉시 웹 서버를 실행할 수 있도록 SimpleHTTPRequestHandler 클래스가 정의되어 있다.
핸들러에는 do_GET() 및 do_HEAD() 메소드가 정의되어 있어 GET 및 HEAD 방식을 처리할 수 있습니다.
그러나 POST 등 그 이외의 HTTP 메소드는 처리할 수 없습니다.
별도의 코딩 없이도 Simple 웹 서버가 동작하는지 확인할 수 있다.
포트번호를 주지 않으면 디폴트로 8000번을 사용합니다.
>python -m http.server 8888
Serving HTTP on 0.0.0.0 port 8888 (http://0.0.0.0:8888/) ...
그러면 8888포트로 요청을 기다리고 있다는 메시지가 나타난다.
정상적으로 실행되었다면, 웹 브라우저를 열어 주소창에 웹 서버의 IP와 포트번호를 적어줍니다.
http://127.0.0.1:8888/ 또는 http://localhost:8888/
화면에는 서버를 실행한 디렉토리의 리스트가 나타납니다.
디렉토리 리스트가 나오는 것은 SimpleHTTPRequestHandler의 do_GET() 메소드가 디렉토리 리스트를 반환하도록 구현.

2.3.4 CGIHTTPRequestHandler 클래스
SimpleHTTPRequestHandler 클래스와 유사하게 CGIHTTPRequestHandler 클래스가 미리 구현되어 있어 필요할 때
즉시 웹 서버를 실행할 수 있습니다.
CGIHTTPRequestHandler 클래스에는 do_POST() 메소드가 정의되어 있어서 POST 방식을 처리할 수 있습니다.
물론 SimpleHTTPRequestHandler 클래스를 상속받고 있어, GET 및 HEAD 방식도 처리합니다.
다만 CGIHTPServer 클래스의 do_POST() 메소드는 CGI 처리 기능만 구현되어 있어서 모든 POST 방식을 처리할 순 없다.
CGI 웹 서버를 실행할 때는 --cgi옵션을 주면 됩니다.
포트번호를 주지 않으면 디폴트로 8000번을 사용합니다.
실행 위치가 웹 서버의 루트 디렉토리가 됩니다.
>python -m http.server 8888 -cgi
Serving HTTP on 0.0.0.0 port 8888 (http://0.0.0.0:8888/) ...
실행이 되면, 8888포트로 요청을 기다리고 있다는 메시지.
CGI 웹 서버가 CGI 스크립트를 정상적으로 처리하는지 확인하려면 두 가지 준비 작업이 필요합니다.
하나는 서버에서 실행되는 스크립트가 필요하고, 다른 하나는 POST 방식으로 요청을 보낼 웹 클라이언트가 필요합니다.
웹 브라우저로는 POST 요청을 보낼 수 없기 때문.
CGI 스크립트를 코딩하는데 클라이언트 요청에 담겨진 질의 문자열에 액세스하기 위해서 FieldStorage() 클래스의
인스턴스를 생성하고, 그 인스턴스의 getvalue() 메소드를 호출한다.
CGI 스크립트 파일은 cgi-bin디렉토리 하위에 위치해야 하고, 리눅스나 맥OS라면, 파일의 액세스 모드를 755로 변경하여
실행 가능한 파일로 변경해야 합니다.
cgi-bin\script.py

리눅스 또는 맥 OS에서 실행하면 파일의 액세스 모드를 755로 변경해 실행 가능한 파일로 변경해야 합니다.
$chmod 755 cgi-bin/script.py

POST 방식으로 요청을 보낼 웹 클라이언트는 파일 위치 무관하다.
cgi_client.py

2.3.5 xxxHTTPServer 모듈 간의 관계(파이선 2.x 버전만 해당)
파이썬 2.x버전에서는 클래스들이 각 모듈로 나뉘어 정의되어 있다.
모든 HTTP 웹 서버는 BaseHTTPServer 모듈의 HTTPServer  클래스를 사용하여 작성하고, 웹 서버에 사용되는
핸들러는 BaseHTTPServer 모듈의 BaseHTTPRequestHandler를 상속받아 작성합니다.
즉, BaseHTTPServer 모듈이 기본이 되고, 확장한 모듈이 SimpleHTTPServer 모듈이고,
CGIHTTPServer 모듈은 SimpleHTTPServer 모듈을 확장한 것.
                                          BaseRequestHandler
                                                   ↑
SocketServer모듈      TCPServer           StreamRequestHandler
                         ↑                         ↑
BaseHTTPServer모듈    HTTPServer          BaseHTTPRequestHandler
                                                   ↑
SimpleHTTPServer모듈  (HTTPServer 임포트) SimpleHTTPRequestHandler
                                                   ↑
CGIHTTPServer모듈     (HTTPServer 임포트)  CGIHTTPRequestHandler
웹 서버를 정의하는 데 사용하는 HTTPServer 클래스는 BaseHTTPServer 모듈에만 정의되어 있고, SimpleHTTPServer 와
CGIHTTPServer 모듈에서는 BaseHTTPServer 모듈의 HTTPServer 클래스를 임포트하여 웹 서버를 정의한다.
즉, 다른 두 모듈에서도 기반 클래스인 HTTPServer 클래스를 그대로 재사용하고 있다는 것.
핸들러 클래스는 각 모듈마다 정의되어 있으며, 각 핸들러 클래스는 상위 모듈의 핸들러 클래스를 상속받아 정의하고 있다.
다른 두 모듈에서는 기반 핸들러인 BaseHTTPRequestHandler 클래스의 기능을 확장하면서 정의하고 있다.
HTTP 프로토콜 처리에서 GET/HEAD 메소드 처리로, POST 메소드를 통한 CGI  처리로 기능을 확장하고 있다.
HTTP 프로토콜은 TCP 프로토콜 기반으로 동작하므로 TCP프로토콜을 처리하는 SocketServer모듈의 클래스도 있다.
또한, 각 모듈에는 해당 HTTPServer 를 코딩 없이 가동할 수 있는 test() 함수를 정의하고 있다.
CGI처리가 가능한 CGIHTTPServer를 기동하려면
>python2 -c "import CGIHTTPServer; CGIHTTPServer.test()" 8888
각 모듈의 test()함수 간에 상위 모듈로 호출하는 것이 체인처럼 엮여있어서 가능하다.
                       call                            call
BaseHTTPServer.test() <----- SimpleHTTPServer.test() <----- CGIHTTPServer.test()
BaseHTTPServer모듈            SimpleHTTPServer모듈           CGIHTTPServer모듈
BaseHTTPServer모듈의 test()함수에서는 HTTPServer 객체를 잠조하는데, 그 HTTPServer 객체의 serve_forever()메소드를
호출해서 해당 웹 서버를 기동하는 방식으로 동작.

2.4 CGI/WSGI 라이브러리
파이썬에서는 WSGI(Web Server Gateway Interface) 규격이 정의되어 있다.
파이썬 애플리케이션을 실행하고자 하는 웹 서버는 이 규격을 준수해야 합니다.
WSGI는 웹 서버와 웹 애플리케이션을 연결해주는 규격으로, 장고같은 파이썬 웹 프레임워크를 개발하거나, 웹 프레임워크를
아파치와 같은 웹 서버와 연동할 때 사용합니다.
WSGI규격은 전통적인 웹 CGI 기술의 단점을 개선하고 파이썬 언어에 맞게 재구성한 것.
파이썬 표준 라이브러리에는 예전의 CGI규격을 위한 cgi 모듈과 개선된 WSGI규격을 구현하기 위한 wsgiref모듈이 같이 존재.
다만 wsgi모듈이 cgi기능을 포함하므로, cgi모듈은 거의 사용하지 않습니다.

2.4.1 CGI 관련 모듈
사용자의 요청은 웹 서버에 있는 파일을 그대로 요청하는 정적요청과 현재의 시간을 요청하는 것처럼 동일한 요청이라도
시점에 따라 응답 내용이 달라지는 동적요청으로 구분됩니다.
동적요청은 웹 서버에서 처리하는 것이 아니라 별도의 애플리케이션에서 처리하는 것이 보통.
그래서 웹 서버에는 동적요청을 애플리케이션으로 넘겨주고 그 결과를 받는 기능이 필요합니다.
이와 같이 웹 서버가 사용자의 요청을 애플리케이션에 전달하고 애플리케이션의 처리 결과를 애플리케이션으로부터
되돌려받기 위한, 즉 웹 서버와 애플리케이션 간에 데이터를 주고받기 위한 규격을 CGI(Common Gateway Interface)라고 함.
파이썬 표준 라이브러리에서는 이러한 CGI 처리를 할 수 있도록 cgi 모듈과 cgitb 모듈을 제공하고 있다.
cgi 모듈은 요청에 포함된 파라미터를 처리하기 위한 FieldStorage 클래스를 정의하고 있고, cgitb 모듈은 CGI
애플리케이션(스크립트)을 실행하는 과정에 에러가 발생하면 에러에 대한 상세 정보를 표시해줍니다.
파이썬의 경우 WSGI기술을 사용해 CGI처리를 하므로 cgi 모듈을 사용할 일은 많지 않습니다.

2.4.2 WSGI 개요
CGI 방식은 요청이 들어올 때마다 처리를 위한 프로세스가 생성되는 방식이라서, 짧은 시간에 다량 요청을 받으면 서버의 부하가
높아져 프로세스가 멈추거나 다운될 수도 있습니다.
이러한 CGI의 단점을 해결하고, 파이썬 언어로 애플리케이션을 좀 더 쉽게 작성할 수 있도록 웹 서버와 웹 애플리케이션 간에
연동 규격을 정의한 것이 WSGI.
그래서 파이썬에서는 WSGI 규격만 맞추면 어떤 웹 서버에서도 파이썬 애플리케이션을 실행할 수 있다.
장고로 웹 애플리케이션을 작성하면, Apache 웹서버에서도 실행할 수도 있고, Nginx 웹 서버에서도 실행할 수 있습니다.
유의해야 할 점은 Apache나 Nginx는 일반 범용 웹 서버로, WSGI 처리 기능이 없습니다.
그래서 이런 웹 서버와 파이썬 웹 애플리케이션 중간에서 WSGI 통신 규격을 처리해주는 것이 mod_wsgi, uWSGI, Cunicorn과
같은 WSGI 서버입니다.
웹 서버와의 연동 기능을 필수적으로 제공해야 하는 파이썬의 웹 프레임워크는 대부분이 WSGI 규격을 준수하고 있다.
WSGI 스펙은 2003년에 PEP(Python Enhancement Proposals) 333으로 만들어졌고, 파이썬 3.x용으로 만들면서 PEP 3333규격.

2.4.3 WSGI 서버의 애플리케이션 처리 과정
WSGI 규격을 준수하는 WSGI 서버에서 실행되는 애플리케이션을 작성하는 것은 편리한 점이 많다.
그래서 대부분의 파이썬 웹 프레임워크는 WSGI 서버를 제공하며, 애플리케이션 개발자는 WSGI 서버에 대한 API 규격만
맞추면, 웹 서버와는 독립적으로 애플리케이션을 작성할 수 있어 생산성이 높아집니다.
웹 서버에서 클라이언트의 요청을 받아 WSGI 서버로 처리를 위임하고, WSGI 서버는 애플리케이션을 실행하여 그 결과를
웹 서버에게 되돌려주면, 웹 서버는 클라이언트에게 응답하는 순서.
                1. Request ↓ ↑ 15. Response      
웹 서버──────────────────────────────────────────────────┐
│2. Requset의 URL 분석                                   │
│3. WSGIScriptAlias에 정의된 URL이면, WSGI 서버에 처리 위임│
└────────────────────────────────────────────────────────┘
            4. 파라미터 전달 ↓ ↑ 14. 처리 결과      
WSGI 서버────────────────────────────────────────────────┐
│5. WSGIScriptAlias에 정의된 wsgi.py 실행                 │
│6. application(environ, start_response) 함수 호출        │
│13. 표준 출력(stdout)에 결과 출력                         │ 
└────────────────────────────────────────────────────────┘
                    7. Call ↓ ↑ 12. return      
applicaiton──────────────────────────────────────────────┐
│8. environ 환경변수 처리                                 │
│9. 뷰 처리, HTTPRequest 객체 생성                        │
│10. start_response() 함수 호출                           │
│11. return HTTPResponse                                 │
└────────────────────────────────────────────────────────┘
WSGI 규격에 따라 애플리케이션을 개발할 때 중요한 사항은 세 가지이다.
1)개발이 필요한 애플리케이션을 함수 또는 클래스의 메소드로 정의하고, 애플리케이션 함수인자를 정의합니다.
def application_name(environ, start_response):
environ:웹 프레임워크에 이미 정의되 있으며, HTTP_HOST, HTTP_USER_AGENT, SERVER_PROTOCOL과 같은 HTTP 환경변수 포함.
start_response:애플리케이션 내에서 응답을 시작하기 위해 반드시 호출해야 하는 함수.
2)start_response 함수의 인자 역시 다음과 같이 정해져 있다.
start_response(status, headers)
status:응답 코드 및 응답 메세지를 지정합니다(200 OK, 404 Not Found 등)
headers:응답 헤더를 지정합니다.
3)애플리케이션 함수의 리턴값은 응답 바디에 해당하는 내용으로, 리스트나 제너레이터와 같은 iterable 타입이어야 한다.

2.4.4 wsgiref.simple_server 모듈
파이썬 표준 라이브러리에서는 웹 프레임워크 개발자가 웹 서버와의 연동 기능을 개발할 수 있도록 wsgiref 패키지의
하위 모듈로 wsgiref.simple_server 모듈을 제공하고 있습니다.
이 모듈은 WSGI 스펙을 준수하는 웹 서버(WSGI서버)에 대한 참조서버, 즉 개발자에게 참고가 될 수 있도록 미리 만들어 놓은
WSGIServer 클래스와 WSGIRequestHandler 클래스를 정의하고 있습니다.
장고의 runserver도 이들 클래스를 사용해 만든 테스트용 웹 서버입니다.
모든 웹 프레임워크가 wsgiref 패키지를 사용하는 것은 아니다.
사용 안하더라도, WSGI스펙을 준수하는 자신만의 웹 프레임워크나 WSGI 서버를 만들면 되기 때문.
Flask 웹 프레임워크에서 사용하는 벡자이크(Werkzeug) WSGI 서버는 wsgiref 패키지를 사용하지 않는 WSGI 웹 서버입니다.
wsgi-server\my_wsgiserver.py
중요한 점은
1)wsgiref.simple_server 모듈은 WSGI 규격을 준수하여 WSGI 서버를 작성할 수 있도록 API를 제공하고 있으며,
make_server() 및 serve_forever() 메소드가 그런 API의 일부입니다.
2)my_app()과 같은 애플리케이션 로직을 호출 가능한 함수나 메소드로 정의하여, 이 함수를 make_server() 인자로
넘겨주어 WSGI 웹 서버를 만듭니다. 이는 애플리케이션 프로그램과 웹 서버 프로그램을 독립적으로 작성할 수 있게
해주는 WSGI 규격의 중요한 원칙.
3)my_app() 함수가 WSGI 규격을 준수하는 애플리케이션 코드입니다. 이 애플리케이션 함수에서 응답을 위한 헤더 및
바디를 구성해서 반환해줍니다.

WSGI서버도 웹 서버이므로 WSGI 서버를 만드는 방식도 간단한 웹서버를 만드는 방식을 그대로 따르고 있습니다.
즉, 서버의 IP 및 PORT, 그리고 핸들러 클래스를 정의한 후에 이들을 인자로 하여 HTTPServer 객체를 생성하고,
그런 다음 HTTPServer 객체의 serv_forever() 메소드를 호출하는 방식과 유사.
이런 로직은 make_server() 함수에서 이뤄집니다.
다른 점은 애플리케이션 로직을 작성하는 my_app() 함수가 추가된 점.
make_server()를 분석해보면, WSGIServer 및 WSGIRequestHandler 클래스가 그대로 사용되고 있고, 기반 클래스로부터
상속받은 서브 클래스입니다.
          http.server 모듈   HTTPServer    BaseHTTPRequestHandler
                                 ↑                   ↑
wsgiref.simple_server 모듈   WSGIServer      WSGIRequestHandler

2.4.5 WSGI 서버 동작 확인
정상적으로 실행되면, 8888포트로 요청을 기다리고 있다는 메시지가 나타납니다.
WSGI서버가 실행되면 웹 브라우저의 주소창에 http://127.0.0.1:8888/을 입력합니다.
my_app() 함수에서 정의한 메시지가 나타나면 정상.