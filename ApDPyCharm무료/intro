파이썬 언어의 장점 중 하나는 운영체제와 무관하게 어디서나 실행할 수 있다는 것.
그래픽 환경의 통합 개발 툴(IDE)을 설치하고 실행.
PyCharm은 파이썬용 통합 개발 툴로서, 다양한 분야의 파이썬 개발자들이 많이 애용하는 툴.
PyCharm은 체코의 JetBrains 회사에서 개발한 툴인데, 유료 버전에서는 기본적으로 장고의 기능을 지원하므로 장고의 프로젝트 생성이나
장고의 커맨드를 쉽게 사용할 수 있다.
무료 버전에서도 약간의 설정만하면 충분히 장고 개발이 가능.

D.1 PyCharm Community Edition 설치하기
사이트에 접속해 [DOWNLOAD NOW] 클릭.
Community 버전의 [DOWNLOAD] 클릭.
설치를 합니다.

D.2 PyCharm 초기 설정하기
이전에 사용했던 PyCharm 툴의 환경설정을 다시 사용할 것인지 물어봅니다.
처음 사용하면 Do not import settings.
이후 라이센스에 동의하고, 나머지는 디폴트로 선택해서 진행.
웰컴 창이 나타나면 [Create New Project] 클릭.
Create New Project:새로운 프로젝트를 만들때 선택합니다. 
Open:이미 존재하는 프로젝트를 사용할 때 선택. 소스를 다운로드해서 사용하는 경우도 해당.
Check out from Version Control:소스 관리 서버로부터 프로젝트를 다운로드하는 경우 선택.

웰컴 창 vs 메인 창
웰컴 창:작업 대상 프로젝트가 없거나 지정이 안된 경우 보이는 화면.
메인 창:작업 대상 프로젝트가 지정된 경우에 보이는 화면. 메인 창에서 작업 대상 프로젝트를 모두 닫은 경우는 웰컴 창.

프로젝트 생성 화면이 나타나면, 가장 먼저 할 일은 파이썬 가상 환경을 만드는 것.
물론 가상 환경 없이도 프로젝트를 진행할 수 있지만, 만드는걸 추천.

D.3 파이썬 가상 환경 구성하기
장고를 비롯한 파이썬의 실제 프로젝트를 개발하는 경우에, 가상환경 사용은 필수.
가상 환경 내에서 장고 프로젝트를 진행하는 것을 추천.
프로젝트 생성 화면에서 [Project Interpreter:New Virtualenv environment]라인을 클릭해 필요한 항목들을 설정.
프로젝트와 가상 환경을 동시에 생성하는 화면입니다.
정보를 입력하고 [Create] 클릭.
Location:프로젝트가 생성될 디렉토리를 입력합니다. 장고 프로젝트의 베이스(루트) 디렉토리가 됩니다.
New environment using:Virtualenv를 선택합니다. 새로운 가상 환경을 만드는 경우.
-Location:가상 환경이 생성될 디렉토리입니다. 이 디렉토리 이름이 가상 환경의 이름으로 간주.
-Base interpreter:가상 환경에서 사용할 파이썬 실행 파일을 지정합니다. 파이썬2, 파이썬3 등의 버전을 선택.
-Inherit global site-packages:시스템 레벨의 파이썬 환경 사용 여부를 지정합니다. 시스템 레벨의 파이썬 환경은 사용하지 않고,
오로지 가상 환경에 설치된 라이브러리만 사용하면 체크하지 않습니다.
-Make available to all projects:다른 프로젝트에서도 이 가상 환경을 사용할 수 있도록 하려면 체크합니다.
Exising interpreter:이미 존재하는 가상 환경을 선택하는 경우.

가상환경이 만들어지면 메인 창이 나타나는데 Tip은 닫아줍니다.
파이썬 프로젝트를 만든 것이지 장고 프로젝트는 아닙니다.
이 가상 환경에 장고를 포함해 필요한 패키지들을 설치하고, 프로젝트 개발을 진행.
프로젝트 개발은 장고 뼈대를 만드는 것부터 시작.

PyCharm에서 가상 환경 만들기 메뉴
PyCharm 툴을 설치하면 파이썬의 가상 환경 툴인 virtualenv가 같이 설치되므로, 별도로 가상 환경 툴을 설치할 필요가 없다.
PyCharm 툴에 virtualenv 기능이 통합되어 있어, PyCharm에서 제공하는 메뉴로 가상환경을 구성할 수 있다.
이미 PyCharm을 설치했다면 메뉴를 활용해 가상환경을 만드는 창으로 이동할 수 있다.
[File]>[New Proejct]>[Proeject Interpreter]
[File]>[Settings]>[Proeject:000]>[Project Interpreter]
[File]>[Default Settings]>[Project Interpreter]
[Configure]>[Settings]>[Project Interpreter]

D.4 Django 패키지 설치하기
PyCharm 무료 버전은 장고 패키지를 설치해주지 않으므로, 가장 먼저 할 일은 vRedbook 가상 환경에 장고 최신 버전을 설치하는 것.
[File]>[Settings]에서 [Project:000]>[Project Interpreter]로 이동.
원하는 가상 환경이 선택되면 패키지 추가를 클릭.
패키지 설치 창이 나오면 검색 란에 설치할 패키지명을 입력해 찾습니다.
선택한 후 패키지의 버전을 확인하고 [Install Package]버튼을 클릭하면 해당 패키지가 설치됩니다.
설치가 완료되면 창을 닫고 Settings창에서 [OK].

D.5 터미널 창에서 Django 프로젝트 뼈대 만들기
장고 패키지가 설치되었으므로 장고의 manage.py 커맨드를 사용할 수 있습니다.
무료버전에서는 manage.py 콘솔 창을 제공하지 않으므로 터미널 창에서 작업해야 합니다.
PyCharm 메인 창의 [Terminal]창을 선택합니다.
아니면 메인창>[View]>[Tool Windows]>[Terminal]
지금부터는 터미널 창에서 명령을 실행하며 장고 프로젝트 뼈대를 만듭니다.
# 터미널 창을 열면 자동으로 가상 환경으로 진입합니다.
(vRedbook) ch99>
# mysite 장고 프로젝트를 생성합니다. (임의의 이름)
# 베이스(루트) 디렉토리의 위치는 현재 디렉토리(.)입니다.
(vRedbook) ch99>django-admin startproject mysite
# mysite 디렉토리가 생성된 것을 확인합니다.
(vRedbook) ch99>dir
# 초기 마이그레이션을 실행합니다. (데이터베이스 및 User, Group 테이블 생성됨)
(vRedbook) ch99>python manage.py migrate
# 데이터베이스 db.sqlite3 파일이 생성된 것을 확인합니다.
(vRedbook) ch99>dir
# 관리자(수퍼유저)의 계정을 생성합니다.
# Username, Email address, Password을 임의로 입력.
(vRedbook) ch99>python manage.py createsuperuser
# polls 앱을 생성합니다.
(vRedbook) ch99>python manage.py startapp polls
# polls 디렉토리에 생성된 파일들을 확인합니다.
(vRedbook) ch99>dir polls
여기까지 뼈대가 만들어진다.
ch99 디렉토리 구조와 [External Libraries] 하위에 vRedbook 가상 환경이 생성된 것을 확인할 수 있다.
이제부터 메인 창에서 settings.py 파일을 포함하여 소스 코딩 작업.
다음 단계는 메인 창에서 모델, 뷰, 템플릿 등의 소스작업을 한 후, runserver 개발용 서버를 실행해 테스트.

D.6 테스트를 위한 runserver 실행하기
유료버전에서는 장고 프로젝트를 생성하면, PyCharm 툴이 자동으로 실행 환경을 구성한 후에 runserver 실행 아이콘을 제공.
무료버전에서는 직접 실행 환경을 구성해야 합니다.
[Run]>[Edit Configurations] 메뉴를 클리갷서 나오는 Run/Debug Configurations창에서 추가해서 [Python] 메뉴를 클릭.
입력후에는 [OK].
Name:ch99Run(임의로 입력)
Script path:ch99 디렉토리에 있는 manage.py 파일 지정. 오른쪽 끝의 아이콘을 클리갛면 파일 선택 창이 열리고, manage.py 선택.
Parameters:runserver
Python interpreter:가상 환경이 자동으로 선택되는데, 정확하게 선택되었는지 확인.
Working directory:장고 프로젝트의 베이스(루트) 디렉터리가 자동으로 선택되는데, 정확하게 선택되었는지 확인.

실행 환경 설정이 완료되면, 실행 툴바의 이름이 ch99Run으로 변경됩니다.
오른쪽의 Play아이콘을 클릭하면 하단에 실행 창이 열리면서 runserver가 실행.
브라우저를 열고 주소창에 입력해 확인.
http://127.0.0.1:8000/ 또는 http://localhost:8000/
실행 창의 좌측에 중지 아이콘과 닫기 아이콘을 이용해 중지.

D.7 외부 프로젝트를 임포트해 사용하기
PyCharm 툴 외부에서 생성된 프로젝트를 PyCharm 툴로 가져오는 것을 import.
임포트하는 기능은 [Open]메뉴에서 제공합니다.
작업 대상 프로젝트 디렉토리를 선택하는 화면에서 선택하고 [OK].
화면이 나타나면 Open in new window을 선택하고 [OK].
메인 창이 열리고, 프로젝트를 볼 수 있다.
가상 환경이 지정되지 않고 시스템 환경이 지정됩니다.
프로젝트를 임포트한 후에는 항상 가상 환경을 확인해야 한다는 점을 유의.
[File]>[settings]메뉴를 선택해 가상 환경을 지정하는 화면으로 이동.
[Project interpreter]항목에서 vRedbook 가상 환경을 선택하고 [OK]
메인 창으로 복귀하면, 가상 환경이 vRedbook으로 지정.
외부의 프로젝트를 임포트를 완료한 상태고 필요한 소스 코딩 작업을 하고 runserver를 실행해 테스트하면 됩니다.

D.8 임포트한 프로젝트 runserver 실행하기
프로젝트를 임포트한다는 것은 프로젝트를 새로 만드는 것과 유사한 환경이므로 항상 유의해야 합니다.
1)가상 환경이 정확히 설정되었는지 확인
2)터미널 창에서 makemigrations/migrate 명령 실행
3)Run 실행 환경이 정확히 설정되었는지 확인

터미널 창을 열고 명령을 실행.
(vRedbook) ch99>python manage.py makemigrations
(vRedbook) ch99>python manage.py migrate

Run 실행 환경까지 설정한 후에는 Play를 클릭해 runserver를 실행.
실행된 후에는 브라우저를 열고 주소로 접속.
http://127.0.0.1:8000/polls/
