아파치 웹 서버의 프로그램명은 httpd이며, 전 세계에서 운영 중인 웹 사이트의 50% 이상이 사용할 정도로 인기 있는 웹 서버.

8.1 장고 설정 변경
일반적으로 운영 환경은 윈도우 서버보다는 리눅스 서버를 많이 사용하고, 가상 환경도 거의 필수적으로 구성.
만일 파이썬 3.x가 없다면 먼저 설치한 후에 가상 환경을 구성.
즉, 파이썬 3.x 버전을 사용하는 가상 환경 v3PyBook을 만듭니다.
가상 환경이 구성되었으면, 아파치 웹 서버인 httpd와 장고 프로그램을 연동하기 위해 장고의 설정을 변경합니다.
작업 순서는 collectstatic 명령을 실행한 후에 SECRET_KEY 작업을 하는 것이 편리합니다.

0. 파이썬 3.x 버전을 사용하는 가상 환경 v3PyBook을 생성
1. settings.py 파일의 DEBUG 변경
2. settings.py 파일의 ALLOWED_HOSTS 변경
3. settings.py 파일의 STATIC_ROOT 추가
4. collectstatic 명령 실행 (가상 환경에 진입 후 실행해야 함)
5. vi www_dir/secret_key.txt 파일 생성 및 SECRET_KEY 저장
6. settings.py 파일의 SECRET_KEY 변경
7. db.sqlite3 파일의 위치 및 권한 변경
8. 로그 파일의 권한 변경

실습 디렉토리명 변경
ch8로 표기. 
$ mv ch5 ch8

mysite/settings.py
DEBUG = False #변경
ALLOWED_HOSTS = [~] #변경
STATIC_ROOT = os.path.join(BASE_DIR, 'www_dir', 'static') #추가

설정 파일을 변경한 후에는 정적 파일을 모으기 위해 collectstatic 명령을 실행합니다.(가상 환경 내에서)
명령의 결과로 STATIC_ROOT에 정의된 www_dir 디렉토리도 생성됩니다.
$ cd /home/shkim/pyBook/ch8
$ source /home/shkim/VENV/v3PyBook/bin/activate
(v3PyBook) $ python manage.py collectstatic

다음은 SECRET_KEY가 노출되지 않도록 별도의 파일에 저장합니다.
장고가 자동으로 만들어준 SECRET_KEY 문자열을 복사한 후, secret_key.txt 파일에 저장.
$ cd /home/shkim/pyBook/ch8/www_dir
$ vi secret_key.txt

그리고 settings.py 파일에서 기존의 SECRET_KEY 라인을 삭제하고, secret_key.txt 파일에서 읽어오는 코드를 추가합니다.
$ cd /home/shkim/pyBook/ch8/mysite
$ vi settings.py
# SECURITY WARNING:keep the secret key used in production secret!
with open(os.path.join(BASE_DIR, 'www_dir', 'secret_key.txt')) as f: #두 라인 추가
    SECRET_KEY = f.read().strip()

다음은 SQLite3의 DB 데이터가 들어있는 db.sqlite3 파일의 위치 및 권한을 변경합니다.
이 작업은 SQLite3 데이터베이스를 사용하는 경우만 필요하고, MySQL, PostgreSQL, Oracle 등의 데이터베이스를 사용하는 경우는 무필요.
settings.py
DATABASES = {
    ...
    'NAME':os.path.join(BASE_DIR, 'db', 'db.sqlite3'), #변경
}

그리고 디렉토리 및 파일의 액세스 권한을 변경.
$ cd /home/shkim/pyBook/ch8
$ mkdir db
$ mv db.sqlite3 db/
$ chmod 777 db/
$ chmod 666 db/db.sqlite3

마지막으로 로그 파일의 액세스 권한을 변경.
$ cd /home/shkim/pyBook/ch8
$ chmod 777 logs/
$ chmod 666 logs/mysite.log

8.2 mod_wsgi 확장 모듈
아파치는 추가로 필요한 기능을 모듈로 만들어 동적 로딩 방식으로 기능을 확장할 수 있는 특징.
클라이언트 요청 URL을 서버 내 디렉토리로 매핑해주는 mod_alias, 사용자 인증을 위한 mod_auth, 톰캣 연동에 사용되는
mod_jk, 프록시 기능을 제공하는 mod_proxy, URL rewrite를 지원하는 mod_rewrite, PHP 및 Perl 스크립트를 실행할 수 있는
mod_php, mod_perl 등의 수많은 확장 모듈이 사용되고 있다.
mod_wsgi도 파이썬 웹 애플리케이션을 실행할 수 있는 확장 모듈 중 하나.
mod_wsgi는 파이썬 웹 애플리케이션 표준 규격인 WSGI를 구현한 확장모듈로서, 파이썬 웹 애플리케이션을 아파치에서 실행하는데 사용.
장고 프레임워크에서도 기본적으로 WSGI 스펙을 준수하므로, 아파치와 장고를 연동하기 위해서 mod_wsgi 모듈을 사용.
WSGI의 스펙은 파이썬 표준 규격인 PEP(Python Enhancement Proposals)3333에 자세하게 정의.
mod_wsgi를 사용해 웹 애플리케이션을 실행할 때, 두 가지 방식의 실행 모드를 제공합니다.
첫 번째는 내장모드(embedded) 모드로 WSGI 애플리케이션을 실행하는 방식.
일반적인 아파치 자식 프로세스 컨텍스트 내에서 애플리케이션이 실행된다는 점에서 mod_python 방식과 유사.
이 모드로 WSGI 애플리케이션을 실행하면 같은 아파치 웹 서버에서 실행되는 다른 웹 애플리케이션과 동일한 동일한 아파치
자식 프로세스를 공유하게 됩니다.
내장 모드의 단점은 WSGI 애플리케이션의 소스가 변경되어 다시 적용하려면 아파치 전체를 재기동해야 한다는 것.
재기동으로 인해 다른 서비스도 영향을 받게 되고, 경우에 따라서는 아파치 재기동 권한이 없어 불편함이 따릅니다.
두 번째는 데몬(daemon)모드로 유닉스 기반의 아파치 2.0이상에서 지원됩니다.
이 모드는 WSGI 애플리케이션의 전용 프로세스에서 애플리케이션이 실행된다는 점에서 FCGI(Fast CGI)/SCGI(Simple CGI)와 유사.
다른 점은 WSGI 애플리케이션을 실행할 때 별도의 프로세스 관리자나 WSGI 어댑터가 필요하지 않으며, 모든 처리는
mode_wsgi가 관리한다는 것.
WSGI 애플리케이션이 데몬 모드로 동작하면 일반적인 다른 아파치 자식 프로세스와는 다른 별도의 프로세스에서 동작합니다.
그래서 정적인 파일을 서비스하는 프로세스나 PHP, Perl 등의 아파치 모듈로 서비스하는 다른 애플리케이션에 미치는 영향이 적다.
또한, 필요하다면 WSGI 애플리케이션 간에도 서로 영향을 주지 않도록, 실행 유저를 달리해 데몬 프로세스를 기동하는 것도 가능.
성능적인 측면에서 mod_wsgi는 C언어로 구현되어 있고, 내부적으로 아파치가 직접 파이썬 API와 동작하므로 상대적으로 적은 메모리.
mod_wsgi의 이러한 구현 방식 덕분에 아파치의 내장 파이썬 인터프리터가 동작하는 방식이나 CGI의 개선된 형태인 FCGI/SCGI에
비해서도 좋은 성능을 보이고 있습니다.
또한, 동작방식은 서로 다르지만, 대용량 웹 애플리케이션에서의 처리성능은 크게 다르지 않습니다.
처리 성능에 문제가 있다면 동작 방식보다는 애플리케이션 자체 문제이거나 데이터베이스 처리로 인한 성능 저하가 이슈일 수 있다.
장고에서는 안정성을 고려하여 내장 모드보다는 데몬 모드로 실행할 것을 권장.

8.3 mod_wsgi 설치
리눅스에서는 mod_wsgi 프로그램을 pip로 설치할 수도 있고, 소스를 직접 컴파일해서 설치할 수도 있다.
리눅스 CentOS 7버전을 사용하고 있다.
또한, mod_wsgi 프로그램을 컴파일할 때 사용하는 파이썬 버전과 장고 애플리케이션을 실행하는 파이썬 버전이 동일해야 한다.

맥OS나 윈도우에서 mod_wsgi 설치
pip로 설치할 수 있지만 조금 다르므로 공식 문서를 참고.

8.3.1 httpd 설치 확인
mod_wsgi 프로그램을 설치하기 전에 아파치 httpd 프로그램은 이미 설치된 것으로 가정하고 진행.
아래 명령으로 httpd 설치 여부를 확인할 수 있습니다.
$ sudo httpd -V
만일 설치되지 않았다면
$ sudo yum install httpd
$ sudo yum install httpd-devel

8.3.2 가상 환경 구성
pip로 설치할 때는 시스템 전역이 아니라 가상 환경 내에 mod_wsgi 프로그램을 설치해야 합니다.
그래서 먼저 가상환경을 구성하고, 이후 설명하는 명령들은 가상 환경 내에서 실행합니다.

8.3.3 mod_wsgi 프로그램 설치
/home/shkim/VENV/v3PyBook 위치에 v3PyBook 가상 환경을 만들었다고 가정.
가상 환경으로 진입한 후에 mod_wsgi 프로그램 설치를 진행.
$ source /home/shkim/VENV/v3PyBook/bin/activate
(v3PyBook) $ sudo pip install mod_wsgi

8.3.4 mod_wsgi-express 명령으로 설치 확인
정상적으로 설치되었다면, 관리용 mod_wsgi-express 명령과 테스트용 아파치 웹 서버가 같이 설치됩니다.
잘 동작하는지 확인하기 위해 테스트용 아파치 웹 서버를 실행합니다.
웹 서버를 중지할 때는 Ctrl + C를 입력
(v3PyBook) $ mod_wsgi-express start-server
Server URL         : http://localhost:8000/
Server Root        : /tmp/mod_wsgi-localhost:8000:1000
Server Conf        : /tmp/mod_wsgi-localhost:8000:1000/httpd.conf
Error Log File     : /tmp/mod_wsgi-localhost:8000:1000/error_log (warn)
Request Capacity   : 5 (1 process * 5 threads)
Request Timeout    : 60 (seconds)
Startup Timeout    : 15 (seconds)
Queue Backlog      : 100 (connections)
Queue Timeout      : 45 (seconds)
Server Capacity    : 20 (event/worker), 20 (prefork)
Server Backlog     : 500 (connections)
Locale Setting     : en_US.UTF-8


브라우저를 통해 루트 URL로 접속합니다.
테스트 웹 서버는 디폴트로 8000 포트를 사용하며, 변경할 수도 있습니다.
http://192.168.56.101:8000/

비슷한 방식으로 테스트용 아파치 웹 서버에서 장고 애플리케이션을 실행.
실행 중인 웹 서버를 Ctrl+C로 중지하고, 아래 명령을 입력.
장고 ch8 프로젝트의 루트 디렉토리에서 실행해야 하며, start_server의 인자로 wsgi.py 파일의 위치를 알려주고 있습니다.
(v3PyBook) $ cd /home/shkim/pyBook/ch8
(v3PyBook) $ mod_wsgi-express start-server mysite/wsgi.py
웹 서버가 실행된 것을 확인한 후에 브라우저로 접속해서,
http://192.168.56.101:8000/

8.3.5 wsgi_module 등록하기
다음은 mod_wsgi 프로그램을 아파치의 확장 모듈로 등록해야 하는데, 두 가지가 필요합니다.
하나는 mod_wsgi 프로그램을 아파치의 확장 모듈 디렉토리에 복사하는 것이고, 또 하나는 설정 파일을 수정하는 것.
(v3PyBook) $ sudo /home/shkim/VENV/v3PyBook/bin/mod_wsgi-express install-module
위 명령의 결과로 mod_wsgi 프로그램이 /etc/httpd/modules/ 디렉토리로 복사되고, 설정 파일에 추가할 내용이 출력됩니다.
먼저 복사가 잘 되었는지 확인합니다.
(v3PyBook) $ ls -l /etc/httpd/modules/
다음은 설정 파일을 수정합니다.
파일 이름은 임의로 정해도 되지만 확장자는 *.conf여야 합니다.
(v3PyBook) $ cd /etc/httpd/conf.modules.d/
(v3PyBook) $ sudo vi 10-wsgi.conf
계속해서 install-module 명령의 결과로 출력된 WSGIPythonHome 지시자도 설정 파일에 추가해야 하는데, 내장 모드와 데몬 모드에 따라
설정 내용이 달라집니다.

8.4 내장 모드로 실행
mod_wsgi 모듈이 아파치 프로세스에 내장되어 실행되는 방식.

8.4.1 아파치 설정
아파치 웹 서버에서 mod_wsgi 모듈을 이용해 파이썬 웹 애플리케이션을 실행할 수 있도록 아파치 설정 파일인 httpd.conf에
mod_wsgi 관련 설정을 추가해야 합니다.
httpd.conf 파일에 직접 추가해도 되지만, httpd.conf 파일에서 include 하는 conf.d 디렉토리에 추가하는 것이 더 좋다.
추가하는 파일 이름 django.conf는 임의로 하면 되지만 확장자는 *.conf여야 하며, 아파치에 대한 설정 및 웹 서버(httpd)
실행은 루트권한으로 작업합니다.
$ cd /etc/httpd/conf.d
$ sudo vi django.conf
#아파치 웹 서버에서 서비스하는 URL(/)과 wsgi.py 파일의 위치를 매핑해줍니다. 루트 URL로 시작하는 모든 요청은 wsgi.py에서
#정의된 WSGI application에서 처리한다는 의미.
WSGIScriptAlias / /home/shkim/pyBook/ch8/mysite/wsgi.py
#만일 가상환경을 사용하고 있다면, 가상 환경의 루트 디렉토리를 지정합니다.
WSGIPythonHome /home/shkim/VENV/v3PyBook
#파이썬 임포트 경로를 지정합니다. 즉, import mysite 등의 문장이 정상으로 동작하도록 합니다.
WSGIPythonPath /home/shkim/pyBook/ch8
#아파치가 wsgi.py 파일을 액세스할 수 있도록 mysite 디렉토리 및 wsgi.py 파일에 대한 접근 권한을 설정합니다.
<Directory /home/shkim/pyBook/ch8/mysite>
<Files wsgi.py>
Require all granted
</Files>
</Directory>
#/static/ URL에 대한 처리를 위해 static 파일이 위치한 디렉토리를 매핑해줍니다. 이 디렉토리는 장고의 collectstatic
#명령에 의해 static 파일을 모아둔 디렉토리입니다. 이는 settings.py 파일의 STATIC_ROOT 항목에 정의된 디렉토리.
Alias /static/ /home/shkim/pyBook/ch8/www_dir/static/
#아파치가 static 디렉토리에 액세스할 수 있도록 디렉토리 접근 권한을 설정.
<Directory /home/shkim/pyBook/ch8/www_dir/static>
Require all granted
</Directory>

8.4.2 지금까지 작업 확인하기
mod_wsgi 모듈에 대한 아파치 설정이 끝나면 아파치를 기동해서 동작을 확인.
기동하기 전에 설정을 정확히 했는데도 시스템에 따라 서비스가 안되는 경우도 있습니다.
장고의 runserver를 실행하면 서비스가 되는데, 아파치 웹 서버로는 서비스가 안되는 경우가 있다.
이런 경우에는 SELinux(Security Enhanced Linux)정책이 적용되어 보안 문제로 서비스가 되지 않는 것일 수 있으므로
SELinux 보안 정책을 확인해서 변경해줘야 합니다.
$ sudo getenforce
Enforcing
$ sudo setenforce permissive
$ sudo getenforce
Permissive

아파치 기동 명령
$ sudo apachectl start

아파치 httpd 명령
$ sudo apachectl start //httpd 기동
$ sudo apachectl stop //httpd 정지
$ sudo apachectl restart //httpd 재가동
$ sudo apachectl -h //htppd 도움말

아파치를 기동한 후에 브라우저를 통해 루트 URL로 접속합니다.
아파치 웹 서버는 80포트를 사용하는데, 생략할 수 있습니다.
https://192.168.56.101:80/

또한, 아파치의 접속 로그를 통해서도 정상적으로 처리된 것을 확인할 수 있습니다.
access_log를 보면 루트 URL에 대한 GET 요청에 응답 코드 200으로 성공 응답.
ch8 $ sudo tail /etc/httpd/logs/access_log

SELinux 운용 모드
SELinux 정책은 세 가지 모드로 운용될 수 있습니다. 정책 변경은 setenforce 명령으로 할 수도 있고, /etc/selinux/config에서도
변경할 수 있습니다. setenforce 명령으로 변경하면 현재 쉘에서 작업하는 동안만 임시적으로 변경하는 것이며, config 파일에서
변경하면 시스템 부팅 시에 운용 모드가 적용됩니다.
enforcing(1):SELinux 보안 정책이 실제로 동작하여 위반 시 처리에 실패함
permissive(0):SELinux 보안 정책이 동작하지는 않지만, 위반 상황 발생 시 경고로 알려줌.
disable:SELinux 보안 정책이 동작하지 않음. config 파일에서만 동작.

8.5 데몬 모드로 실행
안정성을 고려하여 내장 모드보다는 데몬 모드로 실행할 것을 권장.

8.5.1 아파치 설정
유사하게 아파치 설정 파일인 httpd.conf에 mod_wsgi 관련 설정을 추가해야 합니다.
$ cd /etc/httpd/conf.d/
$ sudo vi django.conf
#아파치 웹 서버에서 서비스하는 URL과 wsgi.py 파일의 위치를 매핑해줍니다. 루트 URL로 시작하는 모든 요청은 wsgi.py 파일에서
#정의된 WSGI application 에서 처리한다는 의미.
WSGIScriptAlias / /home/shkim/pyBook/ch8/mysite/wsgi.py
#별도의 데몬 프로세스에서 장고를 실행하기 휘애 데몬 프로세스 하나를 정의합니다. 속성으로 가상 환경 경로와 모듈 임포트 경로를
#지정하였습니다. 내장모드에서 사용한 WSGIPythonHome과 WSGIPythonPath 지시자는 사용할 수 없습니다. 데몬 프로세스 속성으로
#프로세스의 개수와 스레드의 개수 등도 지정할 수 있습니다.
#데몬 프로세스 이름은 중복되면 안됩니다.
WSGIDaemonProcess mygroup python-home=/home/shkim/VENV/v3PyBook python-path=/home/shkim/pyBook/ch8
#장고 애플리케이션이 실행될 프로세스 그룹을 지정합니다. WSGIDaemonProcess 지시자로 정의된 이름 중에서 선택하여 사용.
#동일한 프로세스 그룹에 할당된 애플리케이션은 같은 데몬 프로세스에서 실행됩니다.
WSGIProcessGroup mygroup
#아파치가 wsgi.py 파일을 액세스할 수 있도록 mysite 디렉토리 및 wsgi.py 파일에 대한 접근 권한을 설정합니다.
<Directory /home/shkim/pyBook/ch8/mysite>
<Files wsgi.py>
Require all granted
</Files>
</Directory>
#/static/ URL에 대한 처리를 위해 static 파일이 위치한 디렉토리를 매핑해줍니다. 이 디렉토리는 장고의 collectstatic 명령에
#의해 static 파일을 모아둔 디렉토리입니다. 이는 settings.py 파일의 STATIC_ROOT 항목에 정의된 디렉토리.
Alias /static/ /home/shkim/pyBook/ch8/www_dir/static/
#아파치가 static 디렉토리에 액세스할 수 있 도록 디렉토리 접근 권한을 설정합니다.
<Directory /home/shkim/pyBook/ch8/www_dir/static>
Require all granted
</Directory>

8.5.2 지금까지 작업 확인하기

