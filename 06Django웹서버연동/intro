장고를 사용하여 웹 애플리케이션을 개발한 후에 실제로 서비스하기 위해서는 개발한 프로그램을 운영 환경에 배포하고 실행해야 합니다.
개발환경에서 운영환경으로 옮겨가기 위해서는 지정했던 설정 사항을 변경해야 합니다.
또한, 운영 환경의 웹 서버에서도 만든 애플리케이션을 인식할 수 있도록 설정 사항 변경이 필요.
윈도우 OS에서 개발하고 별도의 리눅스 운영 서버에 소스를 배포한다는 개발 및 운영 환경을 가정.
일반적으로 운영 환경에서는 가상 환경을 거의 필수적으로 구성.
운영 서버는 리눅스 OS를 많이 사용.

배포에 사용되는 FTP 프로그램
개발 서버에서 운영 서버로 소스를 복사하고, 배포(Deploy)해야합니다.
GitHub소스 저장소나 별도의 소스 관리 서버가 있다면, 해당 서버의 기능을 활용해 소스를 배포할 수도 있지만,
가장 평범한 방법은 FTP를 사용하는 것.
Xftp, WinSCP, FileZilla, Transmit, FileFTP 등.

6.1 장고의 wsgi.py 파일
이 모듈이 바로 장고와 웹 서버를 연결하는 데 필요한 파일.
WSGI 규격에 따라 이 모듈에는 호출 가능한 애플리케이션 객체를 정의하고 있다.
객체명은 반드시 application 이어야 한다.
그래서 장고의 wsgi.py 파일에는 application 객체는
application = get_wsgi_appilcation()
이라고 정의되어 있다.
application 객체는 아파치와 같은 운영 웹 서버뿐만 아니라 장고의 개발용 웹 서버인 runserver에서도 같이 사용하는 객체.
하지만 아파치나 NGINX/uWSGI는 설정 파일에서 지정하고, 즉 httpd.conf 설정 파일의 WSGIScriptAlias 지시자나 uwsgi.ini 설정
파일의 module 항목으로 지정하고, 개발용 runserver에서는 settings 모듈의 WSGI_APPLICATION 변수로 지정.
웹 서버는 이 application 객체를 호출하여 장고의 애플리케이션을 실행하게 됩니다.
다만 application 객체를 호출하기 전에 현재의 장고 프로젝트 및 프로젝트에 포함된 모든 애플리케이션에 대한 설정 정보를
로딩하는 작업이 필요하다.
이 설정 정보를 담고 있는 settings 모듈의 위치를 wsgi.py파일에서 지정.
# settings 모듈의 위치를 mysite/wsgi.py 파일에서 지정함
import os
os.environ.setdefault("DJANGO_SETTINGS_MODELS", "mysite.settings")
추가로 개발용 runserver는 다음과 같은 실행 옵션으로도 지정해줄 수 있다.
이 옵션을 지정하지 않으면 wsgi.py 파일을 참조합니다.
# 개발용 runserver는 실행 옵션으로도 지정 가능함
$ python manage.py runserver --settings=mysite.settings

6.2 장고의 WSGI 인터페이스
운영 환경에서는 NGINX와 같은 웹 서버 프로그램이 클라이언트 요청을 수신하므로, 요청을 수신한 웹 서버가 uWSGI와 같은
WAS 서버를 통해 장고 웹 애플리케이션을 호출할 수 있어야 합니다.

uWSGI용어
웹 서버와 애플리케이션 중간에 위치한다고 해서, uWSGI와 같은 프로그램을 WSGI 규격에서는 미들웨어라고 부릅니다.
이 책에서는 프로그램의 역할에 맞춰 WAS 서버나 파이썬의 WSGI 규격을 규현했으므로 WSGI 서버.

장고는 파이썬 웹 애플리케이션을 만들어주는 프레임워크이다.
장고로 만든 프로그램은 WAS 서버에서 호출될 수 있도록 WSGI 규격을 준수해야 하는데,
장고의 startproject 명령을 실행하면 자동으로 생성되는 wsgi.py 파일이 이 역할을 한다.
wsgi모듈이 실행되는 시점에 WSGIHandler 객체가 생성되어 application 변수에 할당됩니다.
바로 이 application 객체, 즉 WSGIHandler 객체를 WAS 서버가 호출하는 것.
# mysite/wsgi.py 파일 내용 일부
application = get_wsgi_application()
# ~/site-packages/django/core/wsgi.py 파일 내용 일부
def get_wsgi_application():
    return WSGIHandler()

WAS 서버 측면에서 보면, WAS 서버가 장고 애플리케이션의 wsgi.py 파일을 호출하여 WSGIHandler 객체를 얻은 다음에,
이 객체를 다시 호출하여 최종 응답을 생성하고, 웹 서버에 돌려주는 것.
# ~/django/core/wsgi.py 파일의 주요 라인만 발췌
#WSGI 규격에서 정의한 애플리케이션의 역할을 수행하는 클래스.
#부모 클래스인 BaseHandler에는 장고의 settings.py 파일에 등록된 MIDDLEWARE에 대한 처리 기능도 포함되어 있다.
class WSGIHandler(base.BaseHandler):
    def __init__(self, *args, **kwargs):
    #WSGI 서버에서 WSGIHandler 객체를 호출할 때, __call__()메소드가 실행됩니다.
    #application 변수가 WSGIHandler 객체이다.
    def __call__(self, environ, start_response):
        #__call__()메소드가 WSGI규격의 애플리케이션 스펙을 구현한 내용.
        #my_app()함수와 매우 유사.
        response = self.get_response(request)
        status = '%d %s' %(response.status_code, response.reason_phrase)
        response_headers = list(response.items())
        start_response(status, response_headers)
        return response

정리하면 장고는 웹 애플리케이션을 만들어주는 프레임워크이고, WSGI 규격의 애플리케이션 스펙을 구현하기 위해 wsgi.py 파일을 제공.
규격에 따라 WSGI 서버에서는 application호출자를 호출하는데, wsgi.py 파일에서 이 호출자를 정의합니다.
장고에서는 이 호출자를 WSGIHandler 클래스로 정의하고 있다.
또한, 웹 서버나 WAS 서버가 장고 애플리케이션을 실행하기 위해서는 application 호출자가 정의된 wsgi.py 파일의 위치를 알아야 한다.
그래서 Apache, NGINX, uWSGI 등의 웹/WAS 서버의 설정 파일에는 application 호출자의 경로가 정의되야 합니다.
장고의 개발용 웹 서버인 runserver도 WSGI 규격에 따라 application 호출자를 구성하는데 settings.py에 정의된 항목으로 파악.
WSGI_APPLICATION = 'mysite.wsgi.application'

6.3 운영 서버 적용 전 장고의 설정 변경 사항
웹 서버와 연동하는 단계는 장고의 애플리케이션 개발이 완료되고, 개발용 웹 서버인 runserver에서 정상적으로 동작하는 것을
확인한 이후 시점.
지금까지는 개발 모드 환경에 맞춰 설정해왔지만, 운영 서버에 적용하기 위해서는 보안, 성능 등을 고려해 변경.
운영 서버에서 필요한 항목들이 제대로 설정되었는지 체크하는 명령이 있다.
운영 서버에 배포한 이후에는 설정 파일을 확인할 수 있다.
$ python manage.py check --deploy

SECRET_KEY는 개발 모드에서는 settings.py 파일에 하드코딩되어 있습니다.
이 항목은 프로젝트 내에서 암호화가 필요할 때 사용되는 항목으로 외부에 노출되어서는 안됩니다.
운영 모드에서는 환경 변수에 저장하거나 파일에 저장한 후에, settings.py 파일에서 아래 코드로 읽어 들이는 것이 좋다.
import os
SECRET_KEY = os.envrion['SECRET_KEY']
# 또는
with open(os.path.join(BASE_DIR, 'www_dir', 'secret_key.txt')) as f:
    SECRET_KEY = f.read().strip()

개발 모드에서는 에러 발생 시 디버그를 위해 브라우저에 여러 가지 정보를 출력하여 보여줍니다.
이런 디버그 정보는 프로젝트에 중요한 정보들이기 때문에, 운영 모드에서는 settings 모듈의 DEBUG 설정값을 False로 세팅해서
디버그 정보가 노출되지 않도록 해야 합니다.
DEBUG = False

DEBUG = False로 설정되어 있으면, 반드시 settings 모듈의 ALLOWED_HOSTS 항목을 설정해야 합니다.
악의적인 공격자가 HTTP Host 헤더를 변조하여 CSRF 공격을 할 수 있기 때문에 방지하기 위한 것.
장고가 실행되는 서버의 IP 주소나 도메인명을 등록합니다.
DEBUG = True인 경우는 ALLOWED_HOSTS=[]라고 설정되어 있어도 ['localhost', '127.0.0.1']로 간주합니다.
ALLOWED_HOSTS = ['192.168.56.101']

개발 서버에서는 이미지, 자바스크립트, CSS 등의 정적 파일들을 알아서 찾아줬지만, 운영 모드에서는 아파치와 같은 웹 서버에서
정적 파일들이 어디에 있는지 알려줘야 합니다.
settings 모듈의 STATIC_ROOT 항목은 장고의 collectstatic 명령 실행 시 정적 파일들을 한곳에 모아주는 디렉토리입니다.
예를 들어 /ch6/www_dir/static 디렉토리에 정적 파일들을 모아줍니다.
STATIC_ROOT = os.path.join(BASE_DIR, 'www_dir', 'static')

위 디렉토리는 웹 서버의 설정 파일에서도 등록해줘야 합니다. 
아파치의 httpd.conf인 경우 Alias /statc/ 항목으로 등록합니다.
collectstatic 명령 사용시 주의할 점은 settings 모듈의 STATICFILES_DIRS 항목에, STATIC_ROOT 항목에서 정의된 디렉토리가
포함되면 안된다는 것.
STATICFILES_DIRS 항목에 정의된 디렉토리에서 정적 파일을 찾아 STATIC_ROOT 디렉토리에 복사해주기 때문.
$ python manage.py collectstatic

개발 모드에서는 runserver를 실행시킨 사용자의 권한으로 데이터베이스 파일이나 로그 파일을 액세스합니다.
그러나 운영 모드에서는 웹 서버 프로세스의 소유자(예를 들어 apache) 권한으로 해당 파일들을 액세스할 수 있어야 합니다.
이를 위해 settings 모듈의 DATABASES 항목에서 NAME 속성값의 경로를 db/db.sqlite3로 변경해주고,
DATABASES = {
    ...
    'NAME':os.path.join(BASE_DIR, 'db', 'db.sqlite3'),
}

해당 디렉토리 및 파일의 액세스 권한을 변경해줘야 합니다.
SQLite 데이터베이스 파일의 위치를 옮기고, SQLite 데이터베이스가 있는 디렉토리 및 파일에 apache 사용자가 접근/읽기/쓰기가
가능하도록 설정.
$ cd /~/ch8
$ mkdir db
$ mv db.sqlite3 db/
$ chmod 777 db/
$ chmod 666 db/db.sqlite3

settings 모듈의 LOGGING 항목에 로깅 관련 사항이 정의되어 있고, 로그 파일의 위치가 설정되어 있습니다.
만약 로그 파일에 웹 서버 프로세스를 소유한 사용자가 읽기/쓰기를 가능하도록 하려면
$ cd /~/ch8
$ chmod 777 logs/
$ chmod 666 logs/mysite.log

웹 환경에서는 캐시 서버와 데이터베이스 서버가 사용되는 경우가 많습니다.
이들 서버는 웹 서버보다 보안 기능이 취약해서, 외부에서 직접 액세스하는 것은 바람직하지 않습니다.
그래서 이들 서버에 연결하는 것은 웹 서버나 WAS 서버로 제한하는 것이 좋다.
또한 데이터베이스의 접속 패스워드도 개발모드에서는 settings.py 파일에 하드코딩되어 있는데,
운영 모드에서는 SECRET_KEY처럼 다른 곳에 저장하는 것을 권장.
만약 메일을 발송하는 기능이 있다면, 장고는 발신자 주소를 디폴트로 root@localhost(에러 발생시 발신자) 및 
webmaster@localhost(그 외 사항에 대한 메일 발신자)로 지정.
메일 서버에 따라서는 보안상의 이유로 허용하지 않기도 해서 SERVER_EMAIL 및 DEFAULT_FROM_EMAIL 설정 항목을 사용해
발신자 주소를 변경해야 한다.

이외에도 보안 강화, 성능 향상, 에러 발생 시 알려주는 법, HTTPS 설정 등은 장고 문서를 확인.
