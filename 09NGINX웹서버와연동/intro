NGINX는 러시아의 Igor Sysoev가 만든 무료 오픈소스 웹 서버입니다.
아파치 웹 서버의 단점으로 지적된 동시 처리 능력을 높이고 메모리를 적게 사용하는 방향으로 아키텍쳐를 설계.
특히 이벤트 기반 처리 방식을 채택하고 있어 프로세스/스레드 방식의 아파치에 비해 성능이 좋은 것으로 평가되고 있다.
아파치 역시 꾸준히 성능을 개선하면서 많이 사용되고 있지만, 새로 구축하는 사이트는 NGINX를 더 많이 사용하는 추세.
오랫동안 누적되어온 아파치의 설정 파일에 비해, 단순해지고 확장이 쉬운 설정 방식이 장점.
장고 프로그램을 실행하기 위해서는 NGINX 이외에도 WAS 서버 역할을 하는 uWSGI 또는 Gunicorn 프로그램을 설치해야 합니다.
Gunicorn은 간단하게 시작할 수 있는 반면 대부분의 상용 사이트에서는 uWSGI를 사용.

9.1 장고 설정 변경하기
운영 환경에서 NGINX 웹 서버와 장고 프로그램을 연동하기 위해서는, 장고의 설정을 변경해야 합니다.
작업 내용은 아파치 연동 작업과 동일.
0. 파이썬 3.x 버전을 사용하는 가상 환경 v3PyBook을 생성
1. settings.py 파일의 DEBUG 변경
2. settings.py 파일의 ALLOWED_HOSTS 변경
3. settings.py 파일의 STATIC_ROOT 추가
4. collectstatic 명령 실행(가상 환경에서)
5. vi www_dir/secret_kye.txt 파일 생성 및 SECRET_KEY 저장
6. settings.py 파일의 SECERT_KEY 변경
7. db.sqlite3 파일의 위치 및 권한 변경
8. 로그 파일의 권한 변경

9.2 NGINX 설치
다양한 설치 방법이 있으며, 솔루션명, 서버 OS, 사용할 저장소에 따라 설치 방법이 조금씩 다르다.
공식 사이트에서 NGINX Plus > Admin Guide > Installing NGINX and NGINX Plus에서 확인할 수 있다.
필자의 선택
Projects->NGINX Open Source
Version->Stable
컴파일 여부->Prebuilt(컴파일 이미 완료됨)
서버 OS->CentOS 나 RHEL
repository->NGINX 저장소 신규 생성

명령은 루트 또는 sudo 권한으로 실행.
NGINX공식 패키지를 저장할 저장소(nginx.repo)를 신규로 생성합니다.ㅏ
baseurl은 CentOS 7.x 기준.
$ sudo vi /etc/yum.repos.d/nginx.repo
[nginx]
name=nginx repos
baseurl=http://nginx.org/packages/centos/7/$basearch/
gpgcheck=0
enabled=1

저장소를 업데이트합니다.
이 명령으로 NGINX가 설치됩니다.
$ sudo yum update

설치가 완료된 후에, NGINX를 기동합니다.
$ sudo nginx

끝으로 정상적으로 기동되었는지 확인합니다.
curl 명령은 루트가 아닌 일반 사용자 계정으로도 실행이 가능하며, 옵션 -I는 응답의 헤더를 보여줍니다.
$ curl -I 127.0.0.1
HTTP/1.1 200 OK
Server: nginx/1.16.0
Date: Tue, 09 Jul 2019 11:09:50 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 23 Apr 2019 14:36:26 GMT
Connection: keep-alive
ETag: "5cbf22ea-264"
Accept-Ranges: bytes

NGINX 간편 설치 방법
만일 서버의 기존 저장소를 사용하거나, 시스템에 따라서는 NGINX 저장소가 이미 등록되어 있는 경우도 있습니다.
이런 경우는 다음 명령으로 NGINX를 설치할 수 있습니다.
$ sudo yum install nginx
그리고 설치 여부를 확인할 수 있습니다.
$ sudo nginx -v

nginx 명령
$ sudo nginx //nginx 기동
$ sudo nginx -s stop //nginx 정지
$ sudo nginx -s reload //nginx 재기동
$ sudo nginx -t //nginx 설정 파일 테스트
$ sudo nginx -h //nginx 도움말

9.3 NGINX 설정
NGINX 프로그램이 정상적으로 설치되었다면, 장고 프로그램을 실행하기 위한 WSGI 규격에 따른 uWSGI 프로그램과의 연동을 위한
설정 작업이 필요합니다.
설정 파일의 위치는 /etc/nginx/conf.d 디렉토리인데, 이는 /etc/nginx/nginx.conf 파일에서 conf.d 디렉토리를 include 하기 때문.
$ sudo vi /etc/nginx/conf.d/ch9_nginx.conf
#server {}블록을 정의하여 가상 서버를 만듭니다.
server {
    #8000 포트를 리슨합니다. 웹 서버는 보통 80 포트를 사용하는데, 테스트용으로 8000 포트.
    listen 8000;
    #서버의 IP 주소를 지정합니다. 도메인이 있으면 도메인명을 적어도 됩니다.
    server_name 127.0.0.1;

    #access_log, error_log 파일 경로는 이미 /etc/nginx/nginx.conf 파일에 지정되어 있습니다.
    # access_lig /var/log/nginx/codejob.co.kr_access.log;
    # error_log /var/log/nginx/codejob.co.kr_error.log;

    #URL이 /favicon.ico인 경우 처리할 내용. 액세스 로그에 기록하지 않도록 하고, 파일을 찾지 못할 경우에도 로그를 기록하지
    #않습니다.
    location = /favicon.ico { access_log off; log_not_found off; }

    #URL이 /static/으로 시작하는 경우 처리할 내용입니다. 정적 파일이 저장된 곳의 루트 디렉토리를 지정합니다.
    #장고의 STATIC_ROOT 항목의 상위 디렉토리입니다. 
    location /static/ {
        root /home/shkim/pyBook/ch9/www_dir;
        #alias 디렉티브를 사용할 수도 있습니다. 이 경우는 path 끝에 슬래쉬(/)를 붙여줍니다.
        #장고의 STATIC_ROOT 항목에 정의된 디렉토리로 지정합니다. collectstatic 명령에 의해 이곳에 정적 파일들이 모여있다.
        # alias /home/shkim/pyBook/ch9/www_dir_static/;
    }
    #위에서 정의한 URL 이외의 URL에 대한 처리 방법을 정의합니다.
    location / {
        #uwsgi 서버에 넘겨줄 파라미터가 정의된 파일을 지정합니다.
        include /home/shkim/pyBook/ch9/www_dir/uwsgi_params;
        #uwsgi_pass 지시자는 nginx에서 uwsgi 프로그램으로 처리를 위임합니다. 웹 서버와 소켓 통신을 할 WAS 서버의
        #IP:PORT를 지정합니다.
        uwsgi_pass 127.0.0.1:8001;
        #웹 서버와 WAS 서버가 동일한 H/W에서 실행되는 경우는 유닉스 도메인 소켓을 사용하는 것이 더 빠릅니다.
        #소켓 파일의 경로를 지정합니다.
        # uwsgi_pass unix:///home/shkim/pyBook/ch9/www_dir/ch9.sock;
    }
}
#샘플로 있던 default.conf 파일을 사용하지 않도록 이름을 변경합니다.
$ sudo mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak
#uwsgi_params 파일은 NGINX 프로그램을 설치할 때 같이 생성됩니다. 이 파일을 장고 프로젝트 내의 적절한 디렉토리로 복사.
$ cp /etc/uwsgi/nginx/uwsgi_params /home/shkim/pyBook/ch9/www_dir/

9.4 uWSGI 설치
uWSGI 프로그램은 일반 사용자 계정으로 설치할 수도 있으나, 시스템 전역으로 설치하겠다.
운영 환경을 만들 때는 전역으로 설치하는 것이 일반적인 방법입니다.
루트 또는 sudo 권한으로 아래 명령을 실행합니다.
$ sudo yum install python-devel
$ sudo pip3 install uwsgi
주의할 점은 uWSGI 프로그램이 의존하는 파이썬 라이브러리를 먼저 설치하고, 패키지명 python-devel은 우분투 등 OS에 따라
python-dev일 수도 있다.
그리고 파이썬 버전에 맞는 pip 명령을 사용해야 합니다.
uwsgi 프로그램을 Python 3.6에서 사용할 예정.

uwsgi 명령
$ uwsgi (옵션) //uwsgi 기동
$ uwsgi --stop pid-file //uwsgi 정지
$ uwsgi --reload pid-file //uwsgi 재기동
$ uwsgi --help //uwsgi 도움말

9.5 uWSGI 설정
설치가 되었으면 uwsgi 명령에 필요한 설정 파일을 작성합니다.
장고 프로젝트별로 하나의 설정 파일이 필요합니다.
vassals는 자식 프로세스를 뜻하는 uWSGI의 용어.
$ sudo mkdir -p /etc/uwsgi/vassals
$ sudo vi /etc/uwsgi/vassals/ch9_uwsgi.ini
[uwsgi]
#장고 프로젝트의 루트(베이스) 디렉토리입니다. 모듈 임포트를 위한 경로입니다.
chdir = /home/shkim/pyBook/ch9
#가상 환경을 사용하고 있다면 가상 환경의 루트 디렉토리를 지정합니다. 가상 환경을 사용하지 않으면 생략합니다.
home = /home/shkim/VENV/v3PyBook
#wsgi.py 파일의 모듈 경로 및 application 변수명입니다. :application 부분은 생략해도 됩니다.
module = mysite.wsgi:application
#웹 서버와 통신할 소켓의 포트 번호를 지정합니다. 이는 nginx 설정 파일에 있는 uwsgi_pass 항목의 포트 번호와 동일해야 한다.
socket = :8001
#웹 서버와 유닉스 도메인 소켓을 사용하여 통신할 경우, 소켓 파일의 경로입니다. nginx 설정 파일의 소켓 파일 경로와 동일해야 합니다.
# socket = /home/shkim/pyBook/ch9/www_dir/ch9.sock
#nginx 및 uwsgi 프로세스가 쓰기할 수 있도록, 소켓 파일의 모드를 666으로 생성합니다.
# chmod-socket = 666
#별도의 마스터 프로세스가 기동되도록 지정합니다.
master = True
#uwsgi 기동 시 자식 프로세스를 5개 생성합니다.
processes = 5
#마스터 프로세스 ID를 저장할 파일입니다.
pidfile = /tmp/ch9-master.pid
#프로세스 종료 시 소켓 파일을 포함하여 환경 변수를 클리어 합니다.
vacuum = True
#현 프로세스에서 처리할 최대 요청 개수를 지정합니다. 요청이 지정된 개수를 초과하면 별도의 프로세스를 기동합니다.
max-requests = 5000
#백그라운드에서 프로세스가 실행되도록 데몬화하고, 데몬에서 사용할 로그 파일의 경로를 지정합니다.
daemonize = /var/log/uwsgi/ch9.log
#설정 파일에서 지정한 로그 파일을 생성합니다.
$ sudo touch /var/log/uwsgi/ch9.log
#uwsgi 프로세스가 쓰기할 수 있도록 로그 파일의 모드를 변경합니다.
$ sudo chmod 666 /var/log/uwsgi/ch9.log

uWSGI 서버는 옵션이 꽤 많은 편이어서 한 번에 모든 것을 파악하기는 쉽지 않습니다.

9.6 지금까지 작업 확인하기
지금까지 nginx와 uwsgi 프로그램을 설치하고 설정 작업을 완료했다.
nginx 명령은 루트 권한으로 실행해야 하는데 반해, uwsgi 명령은 루트 계정 및 일반 사용자 계정으로도 실행할 수 있다.

9.6.1 uWSGI Emperor 모드
시스템 전역으로 uwsgi 프로그램을 설치하였고 루트 권한으로 실행할 것이다.
운영 환경에서는 전역으로 실행하는 것이 일반적.
이렇게 uwsgi 명령을 전역으로 실행하는 경우는 보통 Emperor 모드로 실행합니다.
Emperor 모드는 설정 파일 디렉토리를 감시하면서, 설정 파일에 수정 사항이 발견되면 자동으로 해당 프로세스를 재기동합니다.
uwsgi 서버를 기동하기 전에 머저 nginx 웹 서버를 기동해야 한다.
$ sudo nginx
(이미 실행 중이라면, 아래 명령으로 재기동)
$ sudo nginx -s reload
$
정상적으로 실행되어도 터미널에 메시지 출력은 없고, reload 명령을 실행하면 error.log 파일에 한 줄이 기록.
$ tail /var/log/nginx/error.log
2019/07/09 21:44:26 [notice] 24462#24462: signal process started

다음 단계로 uwsgi 서버를 기동합니다.
uid 옵션과 gid 옵션은 uwsgi 프로세스의 주인이 될 사용자 및 그룹 아이디를 지정합니다.
서버를 중지할 때는 Ctrl+C를 입력합니다.
$ sudo uwsgi --emperor /etc/uwsgi/vassals --uid shkim --gid shkim
위 명령은 *.ini 파일을 사용해 실행할 수도 있습니다.
정상적으로 실행되었다면, 마지막 줄에 요청을 받을 준비가 되었다는 메시지.
*** Starting uWSGI 2.0.18 (64bit) on [Tue Jul  9 22:12:51 2019] ***
compiled with version: 4.8.5 20150623 (Red Hat 4.8.5-36) on 09 July 2019 12:12:40
os: Linux-3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018
nodename: localhost.localdomain
machine: x86_64
clock source: unix
detected number of CPU cores: 1
current working directory: /var/log
detected binary path: /usr/bin/uwsgi
!!! no internal routing support, rebuild with pcre support !!!
setgid() to 1000
setuid() to 1000
*** WARNING: you are running uWSGI without its master process manager ***
your processes number limit is 7144
your memory page size is 4096 bytes
detected max file descriptor number: 1024
*** starting uWSGI Emperor ***
*** has_emperor mode detected (fd: 6) ***
[uWSGI] getting INI configuration from ch9_uwsgi.ini
Tue Jul  9 22:12:51 2019 - [emperor] vassal ch9_uwsgi.ini has been spawned
Tue Jul  9 22:12:51 2019 - [emperor] vassal ch9_uwsgi.ini is ready to accept requests

또한 다른 터미널을 열어 로그 파일의 하단을 보면, 한 개의 마스터 프로세스와 5개의 자식 프로세스가 생성된 것을 알 수 있다.
$ tail -20 /var/log/uwsgi/ch9.log
Set PythonHome to /home/jeonghwan/VENV/v3PyBook
*** Python threads support is disabled. You can enable it with --enable-threads ***
Python main interpreter initialized at 0x1e46990
your server socket listen backlog is limited to 100 connections
your mercy for graceful operations on workers is 60 seconds
mapped 437424 bytes (427 KB) for 5 cores
*** Operational MODE: preforking ***
Traceback (most recent call last):
  File "./mysite/wsgi.py", line 12, in <module>
    from django.core.wsgi import get_wsgi_application
ModuleNotFoundError: No module named 'django'
unable to load app 0 (mountpoint='') (callable not found or import error)
*** no app loaded. going in full dynamic mode ***
*** uWSGI is running in multiple interpreter mode ***
spawned uWSGI master process (pid: 25158)
spawned uWSGI worker 1 (pid: 25159, cores: 1)
spawned uWSGI worker 2 (pid: 25160, cores: 1)
spawned uWSGI worker 3 (pid: 25161, cores: 1)
spawned uWSGI worker 4 (pid: 25162, cores: 1)
spawned uWSGI worker 5 (pid: 25163, cores: 1)

NGINX와 uWSGI를 모두 기동한 후에 브라우저를 통해 루트 URL로 접속합니다.
NGINX 설정 파일에 8000번 포트를 지정했으므로 서버 IP:포트를 입력.
http://192.168.56.101:8000/

9.6.2 uWSGI 일반 모드
테스트처럼 간단하게 사용하거나 소규머의 사이트라면, uwsgi 서버를 Emperor 모드가 아닌 일반 모드로 실행할 수 있습니다.
이 경우는 일반 사용자 계정으로 설정 파일을 만들고 실행해도 됩니다.
그래서 설정 파일과 로그 파일의 위치를 장고 프로젝트 하위로 변경.
$ cd /home/shkim/pyBook/ch9/www_dir/
$ vi ch9_uwsgi.ini
[uwsgi]
chdir=/home/shkim/pyBook/ch9
home = /home/shkim/VENV/v3PyBook
module=mysite.wsgi:application
socket = :8001
# socket = /home/shkim/pyBook/ch9/www_dir/ch9.sock
# chmod-socket = 666
master=True
processes = 5
pidfile=/tmp/ch9-master.pid
vacuum=True
max-requests=5000
daemonize=/home/shkim/pyBook/ch9/www_dir/ch9.log
$ touch /home/shkim/pyBook/ch9/www_dir/ch9.log
$ chmod 666 /home/shkim/pyBook/ch9/www_dir/ch9.log

NGINX가 기동해있으면 uWSGI 서버만 다시 기동.
일반 모드로 uWSGI 서버를 기동하는 것으로, uwsgi 명령도 일반 사용자 계정으로 실행.
$ cd /home/shkim/pyBook/ch9/
$ uwsgi --ini www_dir/ch9_uwsgi.ini
# 아래는 중지 명령입니다(--ini 옵션으로 기동한 서버를 중지할 때 사용).
$ uwsgi --stop /tmp/ch9-master.pid

정상적으로 실행 시 출력되는 메시지는 간단합니다.
[uWSGI] getting INI configuration from www_dir/ch9_uwsgi.ini
로그 파일의 내용은 Emperor 모드와 거의 유사합니다.
한 개의 마스터 프로세스와 5개의 자식 프로세스가 생성.
Set PythonHome to /home/jeonghwan/VENV/v3PyBook
*** Python threads support is disabled. You can enable it with --enable-threads ***
Python main interpreter initialized at 0x26ceb80
your server socket listen backlog is limited to 100 connections
your mercy for graceful operations on workers is 60 seconds
mapped 437424 bytes (427 KB) for 5 cores
*** Operational MODE: preforking ***
Traceback (most recent call last):
  File "./mysite/wsgi.py", line 12, in <module>
    from django.core.wsgi import get_wsgi_application
ModuleNotFoundError: No module named 'django'
unable to load app 0 (mountpoint='') (callable not found or import error)
*** no app loaded. going in full dynamic mode ***
*** uWSGI is running in multiple interpreter mode ***
spawned uWSGI master process (pid: 25751)
spawned uWSGI worker 1 (pid: 25756, cores: 1)
spawned uWSGI worker 2 (pid: 25757, cores: 1)
spawned uWSGI worker 3 (pid: 25758, cores: 1)
spawned uWSGI worker 4 (pid: 25759, cores: 1)
spawned uWSGI worker 5 (pid: 25760, cores: 1)

NGINX와 uWSGI를 모두 기동한 후에, 브라우저로 확인합니다.
http://192.168.56.101:8000/

9.6.3 유닉스 도메인 소켓 사용
대규모 사이트가 아니라면 웹 서버와 WAS 서버가 동일 H/W 박스에서 실행되는 경우도 많습니다.
동일 H/W에서 두 서버 프로그램이 실행되고 있다면, 이 둘 간에 연동 시 네트워크 모듈을 사용하여 소켓 통신을 하는 것이 아니라,
파일 시스템을 사용하여 소켓 통신을 하면 훨씬 성능이 좋아집니다.
이와 같이 파일 시스템을 사용하는 소켓 통신 방식을 유닉스 도메인 소켓, UDS(Unix Domain Socket)방식이라고 하며,
프로세스 간의 데이터 교환을 위한 기술 중 하나입니다.
uWSGI 프로그램도 UDS 방식을 지원합니다.
먼저 UDS 소켓을 사용하도록 NGINX와 uWSGI 설정 파일을 수정합니다.
IP주소:포트번호 대신에 소켓 파일의 경로를 지정하는 게 핵심.
$ sudo vi /etc/nginx/conf.d/ch9_nginx.conf
server {
    ~
    location / {
        include /home/shkim/pyBook/ch9/www_dir/uwsgi_params;
        # uwsgi_pass 127.0.0.1:8001;
        uwsgi_pass unix:///home/shkim/pyBook/ch9/www_dir/ch9.sock;
    }
}

uWSGI 서버는 Emperor 모드와 일반모드 모두 UDS 방식이 가능하지만, Emperor로 실습.
Emperor 모드는 vassals 디렉토리에 자식 프로세스를 위한 설정 파일을 둡니다.
자식 설정 파일에서 UDS 소켓을 사용하도록 변경합니다.
$ cd /etc/uwsgi/vassals
$ sudo vi ch9_uwsgi.ini
[uwsgi]
~
# socket = :8001
socket = /home/shkim/pyBook/ch9/www_dir/ch9.sock
chmod-socket = 666
~

그리고 uwsgi 설정 파일을 하나 더 만듭니다.
동일한 명령을 *.ini 파일로 실행하면 편리합니다.
명령줄 옵션이 길어지는 경우에 자주 사용.
Emperor 프로세스에 대한 *.ini 파일을 작성합니다.
$ cd /etc/uwsgi
$ sudo vi uwsgi_emperor.ini
[uwsgi]
emperor = /etc/uwsgi/vassals
uid = shkim
gid = shkim
master = True
pidfile = /tmp/emperor.pid
vacuum = True
daemonize = /var/log/uwsgi/emperor.log

설정 파일을 모두 작성하였으니, nginx 명령과 uwsgi 명령을 sudo 권한으로 실행.
$ sudo nginx
$ sudo uwsgi --ini /etc/uwsgi/uwsgi_emperor.ini
# 아래는 중지 명령임
$ sudo nginx -s stop
$ sudo uwsgi --stop /tmp/emperor.pid

모두 기동한 후에 브라우저로 확인해봅니다.
http://192.168.56.101:8000/
